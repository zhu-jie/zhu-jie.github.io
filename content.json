{"meta":{"title":"Zhu's Blog","subtitle":"唯有尽力自持，方不至癫狂","description":"记录工作，生活和感悟","author":"Zhu Jie","url":"http://blog.cnjie.net"},"pages":[{"title":"","date":"2018-09-12T06:35:52.498Z","updated":"2018-09-12T06:35:52.498Z","comments":true,"path":"google0d704d3d29a5c2cb.html","permalink":"http://blog.cnjie.net/google0d704d3d29a5c2cb.html","excerpt":"","text":"google-site-verification: google0d704d3d29a5c2cb.html","raw":null,"content":null},{"title":"","date":"2017-06-10T13:11:20.000Z","updated":"2018-09-12T06:35:52.501Z","comments":false,"path":"categories/index.html","permalink":"http://blog.cnjie.net/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"关于我","date":"2017-06-10T13:01:47.000Z","updated":"2020-07-19T09:05:11.106Z","comments":false,"path":"about/index.html","permalink":"http://blog.cnjie.net/about/index.html","excerpt":"","text":"嗨，我是Adiar 目前是一名IT民工同时也是一名忠诚的开源爱好者 在为美好的生活和牛逼的技术默默奋斗着～ 我的技能熟练搬砖，揭瓦，各类杂活 联系我：adair0101@163.com","raw":null,"content":null},{"title":"","date":"2018-02-09T13:46:16.000Z","updated":"2018-09-12T06:35:52.499Z","comments":true,"path":"guestbook/index.html","permalink":"http://blog.cnjie.net/guestbook/index.html","excerpt":"","text":".alsp{font-family:\"楷体\";font-size:36px;text-align:center;} “恋恋不忘，必有反响”","raw":null,"content":null},{"title":"","date":"2017-06-10T14:41:11.000Z","updated":"2018-09-12T06:35:52.497Z","comments":false,"path":"tags/index.html","permalink":"http://blog.cnjie.net/tags/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"记录字句，发现共鸣，源于一言","date":"2017-06-12T13:45:54.000Z","updated":"2018-09-12T06:35:52.499Z","comments":true,"path":"word/index.html","permalink":"http://blog.cnjie.net/word/index.html","excerpt":"","text":"「忆」 其实任何人，在经历时，都不会知道，自己正在经历一生中最幸福的时刻。--奥尔罕.帕慕克-- 世界上最美妙的莫过于此，在不谙世事的年纪，对生活的全部期待就是绚烂的理想本身。 --赫恩曼尼-- 在生活里，我们命中碰到的一切美好的东西，都是以秒计算的。 --高尔基-- 许多年过去了，人们说陈年旧事可以被埋葬，然而我终于明白这是错的，因为往事会自己爬上来。--《追风筝的人》-- 我爱你是以悲剧形式肯定人生。--罗兰.巴特《恋人絮语》-- 我不幸懂得：有时候只有借助谎言才能诉说真实。有时候只有借助玩笑才能诉说真实。--芥川龙之介-- 「鸡血不是鸡汤」 有时候明知那种生活我可能没有机会体验，可还是想为之奋斗。--《达拉斯买家俱乐部》-- 大部分的恐惧与懒惰有关，这句我深以为然。--M.斯科特.派克-- 有什么胜利可言，挺住就意味着一切。--里尔克-- 很多人觉得他们在思考，而实际上他们只是在重新整理自己的偏见。--William James-- 「一针见血」 势利是什么？以一小部分的你，来判别你的全部价值，这就是势利。--阿兰.德波顿-- 我们笑着说再见，却深知再见遥遥无期。--《海上钢琴师》-- 世界的很多事物，追求时候的兴致总要比享用时候的兴致浓烈。--莎士比亚-- 无法做出决策的人，或欲望过大，或觉悟不足。--笛卡尔-- 从来如此，便对吗？--《狂人日记》-- 所谓爱情：就是互相看不顺眼还能将就在一起的感觉。--匿名--","raw":null,"content":null}],"posts":[{"title":"KVM之从网上镜像安装虚拟机Centos6.10--04","slug":"kvm之从网上镜像安装虚拟机Centos6-10-04","date":"2020-07-19T13:14:09.000Z","updated":"2020-07-19T13:27:09.918Z","comments":true,"path":"2020/07/19/kvm之从网上镜像安装虚拟机Centos6-10-04/","link":"","permalink":"http://blog.cnjie.net/2020/07/19/kvm之从网上镜像安装虚拟机Centos6-10-04/","excerpt":"","text":"确认镜像地址CentOS6.10镜像地址http://mirrors.163.com/centos/6.10/os/x86_64/ 开始安装虚拟机123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318[root@kvm image]# virt-install --name vm3_from_internet --disk path=/kvm/image/vm3_from_internet,size=18 --ram 1024 --vcpus 1 --os-type linux --os-variant rhel6 --network bridge=br0 --location=http://mirrors.163.com/centos/6.10/os/x86_64/ --graphics none --console pty,target_type=serial --extra-args 'console=ttyS0,115200n8 serial' # 回车开始将会有一系列的输出在终端打印Starting install...Retrieving file vmlinuz... | 4.1 MB 00:00:00 Retrieving file initrd.img... | 39 MB 00:00:03 Allocating 'vm3_from_internet' | 18 GB 00:00:00 Connected to domain vm3_from_internetEscape character is ^]Initializing cgroup subsys cpusetInitializing cgroup subsys cpuLinux version 2.6.32-754.el6.x86_64 (mockbuild@x86-01.bsys.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-23) (GCC) ) #1 SMP Tue Jun 19 21:26:04 UTC 2018Command line: console=ttyS0,115200n8 serial method=http://mirrors.163.com/centos/6.10/os/x86_64/KERNEL supported cpus: Intel GenuineIntel AMD AuthenticAMD Centaur CentaurHaulsBIOS-provided physical RAM map: BIOS-e820: 0000000000000000 - 000000000009fc00 (usable) BIOS-e820: 000000000009fc00 - 00000000000a0000 (reserved) BIOS-e820: 00000000000f0000 - 0000000000100000 (reserved) BIOS-e820: 0000000000100000 - 000000003fff7000 (usable) BIOS-e820: 000000003fff7000 - 0000000040000000 (reserved) BIOS-e820: 00000000feffc000 - 00000000ff000000 (reserved) BIOS-e820: 00000000fffc0000 - 0000000100000000 (reserved)SMBIOS version 2.4 @ 0xF6210SMBIOS 2.4 present.Hypervisor detected: KVMlast_pfn = 0x3fff7 max_arch_pfn = 0x400000000x86 PAT enabled: cpu 0, old 0x7040600070406, new 0x7010600070106init_memory_mapping: 0000000000000000-000000003fff7000RAMDISK: 3d8d8000 - 3ffefc9aACPI: Deleted _OSI(Windows 2012)ACPI: Deleted _OSI(Windows 2013)ACPI: RSDP 00000000000f61e0 00014 (v00 BOCHS )ACPI: RSDT 000000003ffffad7 00030 (v01 BOCHS BXPCRSDT 00000001 BXPC 00000001)ACPI: FACP 000000003ffff177 00074 (v01 BOCHS BXPCFACP 00000001 BXPC 00000001)ACPI: DSDT 000000003fffe040 01137 (v01 BOCHS BXPCDSDT 00000001 BXPC 00000001)ACPI: FACS 000000003fffe000 00040ACPI: SSDT 000000003ffff1eb 00874 (v01 BOCHS BXPCSSDT 00000001 BXPC 00000001)ACPI: APIC 000000003ffffa5f 00078 (v01 BOCHS BXPCAPIC 00000001 BXPC 00000001)Setting APIC routing to flat.No NUMA configuration foundFaking a node at 0000000000000000-000000003fff7000Bootmem setup node 0 0000000000000000-000000003fff7000 NODE_DATA [0000000000009000 - 000000000003cfff] bootmap [000000000003d000 - 0000000000044fff] pages 8(7 early reservations) ==&gt; bootmem [0000000000 - 003fff7000] #0 [0000000000 - 0000001000] BIOS data page ==&gt; [0000000000 - 0000001000] #1 [0000006000 - 0000008000] TRAMPOLINE ==&gt; [0000006000 - 0000008000] #2 [0001000000 - 0002050a64] TEXT DATA BSS ==&gt; [0001000000 - 0002050a64] #3 [003d8d8000 - 003ffefc9a] RAMDISK ==&gt; [003d8d8000 - 003ffefc9a] #4 [000009fc00 - 0000100000] BIOS reserved ==&gt; [000009fc00 - 0000100000] #5 [0002051000 - 00020510b9] BRK ==&gt; [0002051000 - 00020510b9] #6 [0000008000 - 0000009000] PGTABLE ==&gt; [0000008000 - 0000009000]found SMP MP-table at [ffff8800000f6380] f6380kvm-clock: Using msrs 4b564d01 and 4b564d00kvm-clock: cpu 0, msr 0:1c3db81, boot clockZone PFN ranges: DMA 0x00000001 -&gt; 0x00001000 DMA32 0x00001000 -&gt; 0x00100000 Normal 0x00100000 -&gt; 0x00100000Movable zone start PFN for each nodeearly_node_map[2] active PFN ranges 0: 0x00000001 -&gt; 0x0000009f 0: 0x00000100 -&gt; 0x0003fff7ACPI: PM-Timer IO Port: 0x608Setting APIC routing to flat.ACPI: LAPIC (acpi_id[0x00] lapic_id[0x00] enabled)ACPI: LAPIC_NMI (acpi_id[0xff] dfl dfl lint[0x1])ACPI: IOAPIC (id[0x00] address[0xfec00000] gsi_base[0])IOAPIC[0]: apic_id 0, version 17, address 0xfec00000, GSI 0-23ACPI: INT_SRC_OVR (bus 0 bus_irq 0 global_irq 2 dfl dfl)ACPI: INT_SRC_OVR (bus 0 bus_irq 5 global_irq 5 high level)ACPI: INT_SRC_OVR (bus 0 bus_irq 9 global_irq 9 high level)ACPI: INT_SRC_OVR (bus 0 bus_irq 10 global_irq 10 high level)ACPI: INT_SRC_OVR (bus 0 bus_irq 11 global_irq 11 high level)Using ACPI (MADT) for SMP configuration informationSMP: Allowing 1 CPUs, 0 hotplug CPUsPM: Registered nosave memory: 000000000009f000 - 00000000000a0000PM: Registered nosave memory: 00000000000a0000 - 00000000000f0000PM: Registered nosave memory: 00000000000f0000 - 0000000000100000Allocating PCI resources starting at 40000000 (gap: 40000000:beffc000)Booting paravirtualized kernel on KVMNR_CPUS:4096 nr_cpumask_bits:1 nr_cpu_ids:1 nr_node_ids:1PERCPU: Embedded 33 pages/cpu @ffff880002200000 s104088 r8192 d22888 u2097152pcpu-alloc: s104088 r8192 d22888 u2097152 alloc=1*2097152pcpu-alloc: [0] 0 kvm-clock: cpu 0, msr 0:2218b81, primary cpu clockkvm-stealtime: cpu 0, msr 2212d00Built 1 zonelists in Node order, mobility grouping on. Total pages: 258353Policy zone: DMA32Kernel command line: console=ttyS0,115200n8 serial method=http://mirrors.163.com/centos/6.10/os/x86_64/PID hash table entries: 4096 (order: 3, 32768 bytes)Memory: 976436k/1048540k available (5520k kernel code, 392k absent, 71712k reserved, 6909k data, 1340k init)Kernel/User page tables isolation: enabledHierarchical RCU implementation.NR_IRQS:33024 nr_irqs:256Console: colour *CGA 80x25console [ttyS0] enabledallocated 4194304 bytes of page_cgroupplease try 'cgroup_disable=memory' option if you don't want memory cgroupsDetected 2099.902 MHz processor.Calibrating delay loop (skipped) preset value.. 4199.80 BogoMIPS (lpj=2099902)pid_max: default: 32768 minimum: 301Security Framework initializedSELinux: Initializing.Dentry cache hash table entries: 131072 (order: 8, 1048576 bytes)Inode-cache hash table entries: 65536 (order: 7, 524288 bytes)Mount-cache hash table entries: 256Initializing cgroup subsys nsInitializing cgroup subsys cpuacctInitializing cgroup subsys memoryInitializing cgroup subsys devicesInitializing cgroup subsys freezerInitializing cgroup subsys net_clsInitializing cgroup subsys blkioInitializing cgroup subsys perf_eventInitializing cgroup subsys net_priomce: CPU supports 10 MCE banksSpeculative Store Bypass: VulnerableFEATURE SPEC_CTRL Not PresentFEATURE IBPB_SUPPORT Not PresentSpectre V2 : Mitigation: Full retpolinealternatives: switching to unfair spinlockSMP alternatives: switching to UP codeFreeing SMP alternatives: 38k freedACPI: Core revision 20090903ftrace: converting mcount calls to 0f 1f 44 00 00ftrace: allocating 22051 entries in 87 pagesEnabling x2apicEnabled x2apicAPIC routing finalized to physical x2apic...TIMER: vector=0x30 apic1=0 pin1=2 apic2=-1 pin2=-1CPU0: Intel Westmere E56xx/L56xx/X56xx (Nehalem-C) stepping 01APIC calibration not consistent with PM-Timer: 93ms instead of 100msAPIC delta adjusted to PM-Timer: 6249985 (5824949)Performance Events: unsupported p6 CPU model 44 no PMU driver, software events only.NMI watchdog disabled (cpu0): hardware events not enabledBrought up 1 CPUsTotal of 1 processors activated (4199.80 BogoMIPS).devtmpfs: initializedregulator: core version 0.5NET: Registered protocol family 16ACPI: bus type pci registeredPCI: Using configuration type 1 for base accessbio: create slab &lt;bio-0&gt; at 0ACPI: Interpreter enabledACPI: (supports S0 S5)ACPI: Using IOAPIC for interrupt routingACPI: No dock devices found.PCI: Using host bridge windows from ACPI; if necessary, use \"pci=nocrs\" and report a bugACPI: PCI Root Bridge [PCI0] (domain 0000 [bus 00-ff])pci_root PNP0A03:00: host bridge window [io 0x0000-0x0cf7]pci_root PNP0A03:00: host bridge window [io 0x0d00-0xffff]pci_root PNP0A03:00: host bridge window [mem 0x000a0000-0x000bffff]pci_root PNP0A03:00: host bridge window [mem 0x40000000-0xfebfffff]PCI host bridge to bus 0000:00pci_bus 0000:00: root bus resource [io 0x0000-0x0cf7]pci_bus 0000:00: root bus resource [io 0x0d00-0xffff]pci_bus 0000:00: root bus resource [mem 0x000a0000-0x000bffff]pci_bus 0000:00: root bus resource [mem 0x40000000-0xfebfffff]pci 0000:00:01.3: quirk: [io 0x0600-0x063f] claimed by PIIX4 ACPIpci 0000:00:01.3: quirk: [io 0x0700-0x070f] claimed by PIIX4 SMBACPI: PCI Interrupt Link [LNKA] (IRQs 5 *10 11)ACPI: PCI Interrupt Link [LNKB] (IRQs 5 *10 11)ACPI: PCI Interrupt Link [LNKC] (IRQs 5 10 *11)ACPI: PCI Interrupt Link [LNKD] (IRQs 5 10 *11)ACPI: PCI Interrupt Link [LNKS] (IRQs *9)vgaarb: loadedSCSI subsystem initializedusbcore: registered new interface driver usbfsusbcore: registered new interface driver hubusbcore: registered new device driver usbPCI: Using ACPI for IRQ routingNetLabel: InitializingNetLabel: domain hash size = 128NetLabel: protocols = UNLABELED CIPSOv4NetLabel: unlabeled traffic allowed by defaultSwitching to clocksource kvm-clockpnp: PnP ACPI initACPI: bus type pnp registeredpnp: PnP ACPI: found 6 devicesACPI: ACPI bus type pnp unregisteredNET: Registered protocol family 2IP route cache hash table entries: 32768 (order: 6, 262144 bytes)TCP established hash table entries: 131072 (order: 9, 2097152 bytes)TCP bind hash table entries: 65536 (order: 8, 1048576 bytes)TCP: Hash tables configured (established 131072 bind 65536)TCP reno registeredNET: Registered protocol family 1pci 0000:00:00.0: Limiting direct PCI/PCI transferspci 0000:00:01.0: PIIX3: Enabling Passive Releasepci 0000:00:01.0: Activating ISA DMA hang workaroundsACPI: PCI Interrupt Link [LNKD] enabled at IRQ 11pci 0000:00:04.0: PCI INT A -&gt; Link[LNKD] -&gt; GSI 11 (level, high) -&gt; IRQ 11pci 0000:00:04.0: PCI INT A disabledACPI: PCI Interrupt Link [LNKA] enabled at IRQ 10pci 0000:00:04.1: PCI INT B -&gt; Link[LNKA] -&gt; GSI 10 (level, high) -&gt; IRQ 10pci 0000:00:04.1: PCI INT B disabledACPI: PCI Interrupt Link [LNKB] enabled at IRQ 10pci 0000:00:04.2: PCI INT C -&gt; Link[LNKB] -&gt; GSI 10 (level, high) -&gt; IRQ 10pci 0000:00:04.2: PCI INT C disabledACPI: PCI Interrupt Link [LNKC] enabled at IRQ 11pci 0000:00:04.7: PCI INT D -&gt; Link[LNKC] -&gt; GSI 11 (level, high) -&gt; IRQ 11pci 0000:00:04.7: PCI INT D disabledTrying to unpack rootfs image as initramfs...Freeing initrd memory: 40031k freedsha256_ssse3: Using SSSE3 optimized SHA-256 implementationfutex hash table entries: 256 (order: 2, 16384 bytes)audit: initializing netlink socket (disabled)type=2000 audit(1594113609.004:1): initializedHugeTLB registered 2 MB page size, pre-allocated 0 pagesVFS: Disk quotas dquot_6.5.2Dquot-cache hash table entries: 512 (order 0, 4096 bytes)msgmni has been set to 1985ksign: Installing public key dataLoading keyring- Added public key 283EE91FE7BCC01A- User ID: CentOS (Kernel Module GPG key)Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)io scheduler noop registeredio scheduler anticipatory registeredio scheduler deadline registeredio scheduler cfq registered (default)pci_hotplug: PCI Hot Plug PCI Core version: 0.5pciehp: PCI Express Hot Plug Controller Driver version: 0.4acpiphp: ACPI Hot Plug PCI Controller Driver version: 0.5acpiphp: Slot [2] registeredacpiphp: Slot [3] registeredacpiphp: Slot [5] registeredacpiphp: Slot [6] registeredacpiphp: Slot [7] registeredacpiphp: Slot [8] registeredacpiphp: Slot [9] registeredacpiphp: Slot [10] registeredacpiphp: Slot [11] registeredacpiphp: Slot [12] registeredacpiphp: Slot [13] registeredacpiphp: Slot [14] registeredacpiphp: Slot [15] registeredacpiphp: Slot [16] registeredacpiphp: Slot [17] registeredacpiphp: Slot [18] registeredacpiphp: Slot [19] registeredacpiphp: Slot [20] registeredacpiphp: Slot [21] registeredacpiphp: Slot [22] registeredacpiphp: Slot [23] registeredacpiphp: Slot [24] registeredacpiphp: Slot [25] registeredacpiphp: Slot [26] registeredacpiphp: Slot [27] registeredacpiphp: Slot [28] registeredacpiphp: Slot [29] registeredacpiphp: Slot [30] registeredacpiphp: Slot [31] registeredinput: Power Button as /devices/LNXSYSTM:00/LNXPWRBN:00/input/input0ACPI: Power Button [PWRF][Firmware Bug]: No valid trip foundGHES: HEST is not enabled!Non-volatile memory driver v1.3Linux agpgart interface v0.103crash memory driver: version 1.1Serial: 8250/16550 driver, 4 ports, IRQ sharing enabledial8250: ttyS0 at I/O 0x3f8 (irq = 4) is a 16550A00:05: ttyS0 at I/O 0x3f8 (irq = 4) is a 16550Abrd: module loadedloop: module loadedinput: Macintosh mouse button emulation as /devices/virtual/input/input1Fixed MDIO Bus: probedehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driverehci_hcd 0000:00:04.7: PCI INT D -&gt; Link[LNKC] -&gt; GSI 11 (level, high) -&gt; IRQ 11ehci_hcd 0000:00:04.7: EHCI Host Controllerehci_hcd 0000:00:04.7: new USB bus registered, assigned bus number 1ehci_hcd 0000:00:04.7: irq 11, io mem 0xfebc1000ehci_hcd 0000:00:04.7: USB 2.0 started, EHCI 1.00usb usb1: New USB device found, idVendor=1d6b, idProduct=0002usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1usb usb1: Product: EHCI Host Controllerusb usb1: Manufacturer: Linux 2.6.32-754.el6.x86_64 ehci_hcdusb usb1: SerialNumber: 0000:00:04.7usb usb1: configuration #1 chosen from 1 choicehub 1-0:1.0: USB hub foundhub 1-0:1.0: 6 ports detectedohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driveruhci_hcd: USB Universal Host Controller Interface driveruhci_hcd 0000:00:04.0: PCI INT A -&gt; Link[LNKD] -&gt; GSI 11 (level, high) -&gt; IRQ 11uhci_hcd 0000:00:04.0: UHCI Host Controlleruhci_hcd 0000:00:04.0: new USB bus registered, assigned bus number 2uhci_hcd 0000:00:04.0: irq 11, io base 0x0000c060usb usb2: New USB device found, idVendor=1d6b, idProduct=0001usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1usb usb2: Product: UHCI Host Controllerusb usb2: Manufacturer: Linux 2.6.32-754.el6.x86_64 uhci_hcdusb usb2: SerialNumber: 0000:00:04.0usb usb2: configuration #1 chosen from 1 choicehub 2-0:1.0: USB hub foundhub 2-0:1.0: 2 ports detecteduhci_hcd 0000:00:04.1: PCI INT B -&gt; Link[LNKA] -&gt; GSI 10 (level, high) -&gt; IRQ 10uhci_hcd 0000:00:04.1: UHCI Host Controlleruhci_hcd 0000:00:04.1: new USB bus registered, assigned bus number 3uhci_hcd 0000:00:04.1: irq 10, io base 0x0000c080usb usb3: New USB device found, idVendor=1d6b, idProduct=0001usb usb3: New USB device strings: Mfr=3, Product=2, SerialNumber=1usb usb3: Product: UHCI Host Controllerusb usb3: Manufacturer: Linux 2.6.32-754.el6.x86_64 uhci_hcdusb usb3: SerialNumber: 0000:00:04.1usb usb3: configuration #1 chosen from 1 choicehub 3-0:1.0: USB hub foundhub 3-0:1.0: 2 ports detecteduhci_hcd 0000:00:04.2: PCI INT C -&gt; Link[LNKB] -&gt; GSI 10 (level, high) -&gt; IRQ 10uhci_hcd 0000:00:04.2: UHCI Host Controlleruhci_hcd 0000:00:04.2: new USB bus registered, assigned bus number 4uhci_hcd 0000:00:04.2: irq 10, io base 0x0000c0a0usb usb4: New USB device found, idVendor=1d6b, idProduct=0001usb usb4: New USB device strings: Mfr=3, Product=2, SerialNumber=1usb usb4: Product: UHCI Host Controllerusb usb4: Manufacturer: Linux 2.6.32-754.el6.x86_64 uhci_hcd 第一步 配置IP 应用配置 使用文本模式 欢迎界面 全部重新初始化 设置时间 设置root密码 分区确认 改变所有磁盘 剩下的就是漫长的安装等待过长 安装完毕后重启即可 至此可以看到已经安装完成 退出安装好的虚拟机退出当前虚拟机。退出虚拟控制台使用键盘上的 Ctrl + ] 键。 查看当前虚拟机运行状态1234[root@kvm image]# virsh list Id Name State---------------------------------------------------- 6 vm3_from_internet running 再次使用virsh连接vm3_from_internet12345678910[root@kvm ~]# virsh console vm3_from_internetConnected to domain vm3_from_internetEscape character is ^]CentOS release 6.10 (Final)Kernel 2.6.32-754.el6.x86_64 on an x86_64localhost.localdomain login: rootPassword: Last login: Tue Jul 7 09:35:38 on ttyS0 关于console连接虚拟机的说明&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为什么我们可以使用console连接通过网络安装的虚拟机呢？是因为在进行网络安装的时候使用了这些参数:–console pty,target_type=serial –extra-args ‘console=ttyS0,115200n8 serial’ ，而这些参数不支持本地镜像安装。当然，如果你硬是想要用virsh console 去连接本地安装的虚拟机 ,那也是可以的。只不过，要登录登陆本地虚拟机做以下配置： 在 /etc/securetty 文件中添加登录控制台ttyS0: 1[root@vm1 ~]# echo \"ttyS0\" &gt;&gt; /etc/securetty 在grub 配置文件中加入 console=ttyS0 （注：该配置必须与kernel 在同一行，不允许在新行） 123456789[root@vm1 ~]# egrep -v '^$|#' /etc/grub.confdefault=0timeout=5splashimage=(hd0,0)/grub/splash.xpm.gzhiddenmenutitle CentOS 6 (2.6.32-754.el6.x86_64) root (hd0,0) kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=/dev/mapper/VolGroup-lv_root rd_NO_LUKS LANG=en_US.UTF-8 rd_NO_MD rd_LVM_LV=VolGroup/lv_swap SYSFONT=latarcyrheb-sun16 crashkernel=auto rd_LVM_LV=VolGroup/lv_root KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet console=ttyS0 initrd /initramfs-2.6.32-754.el6.x86_64.img 在初始化启动模式文件中加入 S0:12345:respawn:/sbin/agetty ttyS0 115200 1[root@vm1 ~]# echo \"S0:12345:respawn:/sbin/agetty ttyS0 115200\" &gt;&gt; /etc/inittab 重启虚拟机 1[root@vm1 ~]# init 6 重启完成后在kvm物理机上通过console连接 123456789101112131415161718[root@kvm ~]# virsh console vm1Connected to domain vm1Escape character is ^]CentOS release 6.10 (Final)Kernel 2.6.32-754.el6.x86_64 on an x86_64localhost.localdomain login: rootPassword: Last login: Tue Jul 7 20:32:13 from 192.168.0.43i[root@vm1 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN qlen 1000 link/ether 52:54:00:28:93:1d brd ff:ff:ff:ff:ff:ff &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过主机名可以看到已经成功登陆","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"虚拟化","slug":"技术/虚拟化","permalink":"http://blog.cnjie.net/categories/技术/虚拟化/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"kvm","slug":"kvm","permalink":"http://blog.cnjie.net/tags/kvm/"}]},{"title":"KVM之本地安装虚拟机--03","slug":"KVM之本地安装虚拟机-03","date":"2020-07-19T13:01:31.000Z","updated":"2020-07-19T13:13:31.052Z","comments":true,"path":"2020/07/19/KVM之本地安装虚拟机-03/","link":"","permalink":"http://blog.cnjie.net/2020/07/19/KVM之本地安装虚拟机-03/","excerpt":"","text":"在kvm宿主机上格式化新添加的硬盘1234567891011121314151617181920212223242526[root@kvm ~]# fdisk /dev/sdaWelcome to fdisk (util-linux 2.23.2).Changes will remain in memory only, until you decide to write them.Be careful before using the write command.Device does not contain a recognized partition tableBuilding a new DOS disklabel with disk identifier 0x0c2c0d45.Command (m for help): n # 新建分区Partition type: p primary (0 primary, 0 extended, 4 free) # 主分区 e extendedSelect (default p): pPartition number (1-4, default 1): 1 # 分区1First sector (2048-419430399, default 2048): Using default value 2048 # 分配所有空间Last sector, +sectors or +size&#123;K,M,G&#125; (2048-419430399, default 419430399): Using default value 419430399Partition 1 of type Linux and of size 200 GiB is setCommand (m for help): w # 保存配置The partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks. 格式化分区 1234567891011121314151617181920212223[root@kvm ~]# mkfs -t ext4 /dev/sda1 # 格式化分区mke2fs 1.42.9 (28-Dec-2013)Filesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks13107200 inodes, 52428544 blocks2621427 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=21999124481600 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000, 7962624, 11239424, 20480000, 23887872Allocating group tables: done Writing inode tables: done Creating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done 挂载磁盘，并加入重启自动挂载 12[root@kvm ~]# mkdir /kvm;mount /dev/sda1 /kvm[root@kvm ~]# echo \"/dev/sda1 /kvm ext4 defaults 0 0\" &gt;&gt; /etc/fstab 将ISO文件上传到/opt/iso下 123[root@kvm ~]# cd /opt/iso/[root@kvm iso]# lsCentOS-6.10-x86_64-bin-DVD1.iso 安装虚拟机1 创建虚拟机存放目录，该目录分区必须足够大 1[root@kvm ~]# mkdir /kvm/image 配置安装参数，执行安装命令 123456789101112[root@kvm ~]# virt-install --name vm1 --disk path=/kvm/image/vm1.img,size=18 --ram 1024 --vcpus 1 --cdrom /opt/iso/CentOS-6.10-x86_64-bin-DVD1.iso --os-type linux --os-variant rhel6 --network bridge=br0 --vnc --vnclisten=0.0.0.0 --vncport=5901# 【参数说明】:--name 指定虚拟机的名字--ram 指定内存分配多少--disk path 指定虚拟磁盘放到哪里，size=18 指定磁盘大小为18G,这样磁盘文件格式为raw，raw格式不能做快照，后面有说明，需要转换为qcow2格式，如果要使用qcow2格式的虚拟磁盘，需要事先创建qcow2格式的虚拟磁盘。 参考 http://www.361way.com/kvm-qcow2-preallocation-metadata/3354.html 示例:qemu-img create -f qcow2 -o preallocation=metadata /data/test02.img 7G; --disk path=/data/test02.img,format=qcow2,size=7,bus=virtio--ram 指定内存大小 单位M--vcpus 指定分配cpu几个--cdrom 指定本地iso文件路径--os-type 指定系统类型为linux--os-variant 指定系统版本--network 指定网络类型 执行完上面的操作会看到如下截图 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为我们的KVM没有安装图形化桌面，所以连接虚拟机需要用到VNC Viewer，下面假设已经安装VNC Viewer，连接方式如下所示 新建连接 输入KVM服务器IP和在安装的虚拟机vnc端口，完成后点击OK即可 完成上述操作后就可以看到如下界面了 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;具体操作见【如何安装Linux操作系统】 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;待完全安装完毕后，我们最先执行安装的界面将会输出如下结果 安装虚拟机2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的方式使用默认创建的虚拟机是raw格式的，通过下面的创建方式指定虚拟机格式，同安装虚拟机1一样，我们也将qcow2格式的虚拟机放于/kvm/image下 创建虚拟机 12[root@kvm ~]# qemu-img create -f qcow2 /kvm/image/CentOS-6.10.qcow2 18G Formatting '/kvm/image/CentOS-6.10.qcow2', fmt=qcow2 size=19327352832 encryption=off cluster_size=65536 lazy_refcounts=off 确认虚拟机格式 1234567891011[root@kvm ~]# file /kvm/image/CentOS-6.10.qcow2 /kvm/image/CentOS-6.10.qcow2: QEMU QCOW Image (v3), 19327352832 bytes[root@kvm ~]# qemu-img info /kvm/image/CentOS-6.10.qcow2 image: /kvm/image/CentOS-6.10.qcow2file format: qcow2virtual size: 18G (19327352832 bytes)disk size: 196Kcluster_size: 65536Format specific information: compat: 1.1 lazy refcounts: false 安装虚拟机 1[root@kvm image]# virt-install --name vm2_qcow2 --ram 1024 --cdrom /opt/iso/CentOS-6.10-x86_64-bin-DVD1.iso --disk path=/kvm/image/CentOS-6.10.qcow2 --network network=default --vnc --vnclisten=0.0.0.0 --vncport=5902 --os-type=linux --os-variant=rhel6 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行指令后将会看到如下界面 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剩下的操作同安装虚拟机1 常见KVM管理命令 命令 说明 virsh list –all 查看所有虚拟机状态 virsh start vm1 VM1 开机 virsh start vm1 VM1开机 virsh shutdown vm1 VM1关机 virsh destroy vm1 强制关闭电源 virsh undefine test1 移除虚拟机 virsh suspend vm_name 暂停虚拟机 virsh resume vm_name 恢复虚拟机 ls /etc/libvirt/qemu/ 主机的配置文件所在位置","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"虚拟化","slug":"技术/虚拟化","permalink":"http://blog.cnjie.net/categories/技术/虚拟化/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"kvm","slug":"kvm","permalink":"http://blog.cnjie.net/tags/kvm/"}]},{"title":"KVM之网络配置--02","slug":"KVM之网络配置-02","date":"2020-07-19T12:57:22.000Z","updated":"2020-07-19T13:01:45.062Z","comments":true,"path":"2020/07/19/KVM之网络配置-02/","link":"","permalink":"http://blog.cnjie.net/2020/07/19/KVM之网络配置-02/","excerpt":"","text":"手动从配置文件建立桥接网卡 新建网卡配置文件 12[root@localhost ~]# cd /etc/sysconfig/network-scripts/[root@localhost network-scripts]# cp ifcfg-eth0 ifcfg-br0 # 直接拷贝本地 修改复制的br0配置文件 1234567891011121314151617181920[root@localhost network-scripts]# cat ifcfg-br0 TYPE=Bridge # 需要修改为BridgePROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=br0 # 需要修改br0#UUID=abb1e71b-9a34-48dc-b94f-ca3d8a22e07a # 如果有mac地址则需要清除DEVICE=br0 # 需要修改br0ONBOOT=yesIPADDR=192.168.0.43NETMASK=255.255.255.0GATEWAY=192.168.0.1DNS1=192.168.0.1 将物理网卡eth0连接到br0桥接（作为桥接成员) 123456789101112131415161718# 修改ifcfg-eth0配置文件：# cat ifcfg-eth0 TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=noneDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=eth0UUID=abb1e71b-9a34-48dc-b94f-ca3d8a22e07aDEVICE=eth0ONBOOT=yesBRIDGE=br0 # 指定桥接设备为br0 重启网络服务 1[root@localhost ~]# systemctl restart network 查看桥接配置 如果br0启用成功，则原来的eth0的地址的会到br0 123456789101112131415161718192021[root@localhost ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000 link/ether 52:54:00:18:8a:72 brd ff:ff:ff:ff:ff:ff3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 52:54:00:5a:84:4f brd ff:ff:ff:ff:ff:ff inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0 valid_lft forever preferred_lft forever4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000 link/ether 52:54:00:5a:84:4f brd ff:ff:ff:ff:ff:ff5: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether 52:54:00:18:8a:72 brd ff:ff:ff:ff:ff:ff inet 192.168.0.43/24 brd 192.168.0.255 scope global noprefixroute br0 valid_lft forever preferred_lft forever inet6 fe80::a0c3:866c:ab31:fd8b/64 scope link noprefixroute valid_lft forever preferred_lft forever 命令行快速建立桥接网卡1234567891011[root@localhost ~]# brctl addbr br0 #增加一个br0的网桥[root@localhost ~]# brctl show bridge name bridge id STP enabled interfacesbr0 8000.000000000000 novirbr0 8000.525400689be3 yes virbr0-nic vnet0然后将bro网桥加入到eth0接口，这个操作结束后ssh将连接补上node1[root@localhost ~]# brctl addif br0 eth0解决连接不上的问题[root@localhost ~]# ip addr del dev eth0 10.0.0.7/24[root@localhost ~]# ifconfig br0 10.0.0.7/24 up","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"虚拟化","slug":"技术/虚拟化","permalink":"http://blog.cnjie.net/categories/技术/虚拟化/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"kvm","slug":"kvm","permalink":"http://blog.cnjie.net/tags/kvm/"}]},{"title":"KVM之入门介绍与基于CentOS7的安装部署--01","slug":"KVM之入门介绍与基于CentOS7的安装部署-01","date":"2020-07-19T12:32:40.000Z","updated":"2020-07-19T12:56:33.707Z","comments":true,"path":"2020/07/19/KVM之入门介绍与基于CentOS7的安装部署-01/","link":"","permalink":"http://blog.cnjie.net/2020/07/19/KVM之入门介绍与基于CentOS7的安装部署-01/","excerpt":"","text":"什么是KVMKVM: Kernel-based Virtual Machine 结构简单，包含两个部分： 设备驱动/dev/kvm 针对模拟PC硬件的用户空间组件 KVM需要CPU中虚拟化功能的支持，只可在具有虚拟化支持的CPU上运行，即具有VT功能的Intel CPU和具有AMD-V功能的AMD CPU。 架构图 KVM特性 嵌入到Linux正式Kernel（提高兼容性） 代码级资源调用（提高性能） 虚拟机就是一个进程（内存易于管理） 直接支持NUMA技术（提高扩展性） ———RedHat 收购KVM——- 保持开源发展模式 更好的商业支持和服务保障 KVM与QEMUKVM介绍：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于KVM来说，其是一款支持虚拟机技术，而且是Linux内核中的一个功能模块。它在Linux2.6.20之后的任何Linux分支中都被支持。它还有一个条件，对硬件要求的条件，必须达到一定标准的硬件架构。对于Intel-VT与AMD-V都是支持的。对于是否支持也可以通过命令行查看：egrep ‘(vmx|svm)’ –color=always /proc/cpuinfo。如果有任何内容则说明当期硬件架构是支持KVM的，否则就不支持。另外，就算支持，但是在bios中是默认设置不打开该功能的，所以你还要去bios设置其为enable。当设置成功之后，还需要关机一次，注意是关机而不是重启。否则该设置的更改就不起效。 QEMU:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QEMU是什么。其实它也是一款虚拟化技术，就算不使用KVM，单传的QEMU也可以完全实现一个虚拟机。那为何还会有QEMU-KVM这个名词那。是因为虽然KVM的技术已经相当成熟而且可以对很多东西进行隔离，但是在某些方面还是无法虚拟出真实的机器。比如对网卡的虚拟，那这个时候就需要另外的技术来做补充，而QEMU-KVM则是这样一种技术。它补充了KVM技术的不足，而且在性能上对KVM进行了优化。 Red-Hat企业级虚拟化解决方案 Red-Hat桌面虚拟化 基于CentOS7的安装部署安装前准备 确保服务器开启虚拟化支持 123[root@localhost ~]# grep -E '(vmx|svm)' /proc/cpuinfoflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb lm constant_tsc nopl nonstop_tsc eagerfpu pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch tpr_shadow vnmi flexpriority ept vpid fsgsbase bmi1 hle avx2 smep bmi2 invpcid rtm rdseed adx xsaveoptflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb lm constant_tsc nopl nonstop_tsc eagerfpu pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch tpr_shadow vnmi flexpriority ept vpid fsgsbase bmi1 hle avx2 smep bmi2 invpcid rtm rdseed adx xsaveopt 关闭selinux 1[root@localhost ~]# setenforce 0 &amp;&amp; sed -i 's/SELINUX\\=enforcing/SELINUX\\=disabled/g' /etc/selinux/config NTP设置 12345# 配置文件/etc/ntp.conf[root@localhost ~]# /usr/sbin/ntpdate cn.ntp.org.cn 26 Dec 15:18:44 ntpdate[13806]: step time server 120.25.108.11 offset 1.377732 sec[root@localhost ~]# crontab -l*/5 * * * * /usr/sbin/ntpdate cn.ntp.org.cn &gt;/dev/null 2&gt;&amp;1 安装KVM 安装epel 123456[root@localhost ~]# rpm -ivh http://mirrors.ustc.edu.cn/epel/7/x86_64/Packages/e/epel-release-7-12.noarch.rpmRetrieving http://mirrors.ustc.edu.cn/epel/7/x86_64/Packages/e/epel-release-7-12.noarch.rpmwarning: /var/tmp/rpm-tmp.qzBtSd: Header V3 RSA/SHA256 Signature, key ID 352c64e5: NOKEYPreparing... ################################# [100%]Updating / installing... 1:epel-release-7-12 ################################# [100%] 安装相关的工具 qemu-kvm qemu-kvm-tools # QEMU的一个工具用于管理KVM virt-manager&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 使用这个包里的工具创建虚拟机 libvirt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 创建的虚拟机用libvirt进行管理 123456[root@localhost ~]# yum install qemu-kvm qemu-kvm-tools virt-manager libvirt -yLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfileepel/x86_64/metalink | 9.5 kB 00:00:00 * epel: my.mirrors.theg ........ 启动libvird 123456789101112131415161718[root@localhost ~]# systemctl start libvirtd[root@localhost ~]# systemctl status libvirtd● libvirtd.service - Virtualization daemon Loaded: loaded (/usr/lib/systemd/system/libvirtd.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2019-12-26 15:51:16 CST; 4s ago Docs: man:libvirtd(8) https://libvirt.org Main PID: 14704 (libvirtd) Tasks: 18 (limit: 32768) CGroup: /system.slice/libvirtd.service └─14704 /usr/sbin/libvirtdDec 26 15:51:15 localhost.localdomain systemd[1]: Starting Virtualization daemon...Dec 26 15:51:16 localhost.localdomain systemd[1]: Started Virtualization daemon.# 启动后会多出virbr0网卡， 对应的iptables也会跟随着变化，这个virbr0类似一个交换机[root@localhost ~]# brctl show bridge name bridge id STP enabled interfacesvirbr0 8000.5254005a844f yes virbr0-nic 检查kvm模块是否加载 123456[root@localhost ~]# lsmod |grep kvmkvm_intel 183621 0 kvm 586948 1 kvm_intelirqbypass 13503 1 kvm# 如果没有加载则执行，还是没有就重启服务器[root@localhost ~]# modprobe kvm-amd 至此kvm就安装部署完毕了","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"虚拟化","slug":"技术/虚拟化","permalink":"http://blog.cnjie.net/categories/技术/虚拟化/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"kvm","slug":"kvm","permalink":"http://blog.cnjie.net/tags/kvm/"}]},{"title":"Windows防火墙","slug":"Windows防火墙","date":"2018-04-24T06:35:40.000Z","updated":"2020-07-19T09:37:59.636Z","comments":true,"path":"2018/04/24/Windows防火墙/","link":"","permalink":"http://blog.cnjie.net/2018/04/24/Windows防火墙/","excerpt":"","text":"简介&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与以前Windows版本中的防火墙相比，Windows Server 2008中的高级安全Windows防火墙（WFAS）有了较大的改进，首先它支持双向保护，可以对入站、出站通信进行过滤。其次它将Windows防火墙功能和Internet协议安全（IPSec）集成到一个控制台中。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Windows Server 2008高级防火墙配置中，通过使用配置规则来响应传入和传出流量，以便确定允许或阻止哪种数据流量。当传入数据包到达计算机时，防火墙检查该数据包，并确定它是否符合防火墙规则中指定的标准，如果数据包与规则中的标准匹配，则防火墙将执行规则中指定的操作，即阻止连接或允许连接；如果数据包与规则中的标准不匹配，则防火墙将丢弃该数据包，并在防火墙日志中创建相应条目（如果启用了日志记录）。对规则进行配置时，可以从各种标准中进行选择，包括应用程序名称、系统服务名称、系统端口、IP地址等。下面就通过不同的实例，分别介绍不同规则的应用方法。 入站规则配置&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;入站规则明确允许或者阻止与规则条件匹配的通信。在默认情况下将阻止入站通信，若要允许通信，必须创建一个入站规则。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，在一台服务器（192.168.1.25）上安装并启用FTP服务后，防火墙中将添加一条允许所有FTP入站连接的入站规则。如何配置防火墙规则以阻止客户端192.168.1.10通过FTP连接到服务器，而其他客户端都能够通过FTP连接到服务器？&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;具体操作步骤如下所述。 Step_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在“管理工具”中打开“服务器管理器”。展开“配置”→“高级安全Windows防火墙”，右击“入站规则”，选择“新规则”. Step_2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在规则类型页面中选择“端口”，单击“下一步”. Step_3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在协议和端口页面中选择“TCP”和“特定本地端口”，并输入“21”，单击“下一步”. Step_4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在操作页面中选择“阻止连接”，单击“下一步”. Step_5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在配置文件页面中选择“域”、“专用”、“公用”，单击“下一步”. Step_6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在名称页面中输入名称和描述，然后单击“完成”按钮. 注意啦：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;防火墙有域配置文件、专用配置文件和公用配置文件三个配置文件，分别用于域环境、单机环境和公用环境，一般可以选择域、专用和公用复选框以便规则适用于各种环境。 Step_7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在入站规则中右击“FTP入站”规则，选择“属性”，在“作用域”选项卡中添加本地IP地址和要阻止的远程IP地址.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在IP地址为192.168.1.10的计算机上通过ftp://192.168.1.25访问FTP服务器；在其他IP地址的计算机上通过ftp://192.168.1.25访问FTP服务器。前者的访问结果如下图所示，而后者可以正常访问。 出站规则&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;出站规则明确允许或者拒绝来自与规则条件匹配的计算机的通信。例如，可以将规则配置为明确阻止出站通信通过防火墙到达某一台计算机，但允许同样的通信到达其他计算机。默认情况下允许出站通信，因此必须创建出站规则来阻止通信。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;案例：有一台Web服务器的IP地址为192.168.1.10，本地计算机的默认出站连接设置为允许，如何通过出站规则阻止本地计算机通过IE访问Web服务器？&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;具体操作步骤如下所述。 Step_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在“管理工具”中打开“服务器管理器”。展开“配置”→“高级安全Windows防火墙”，右击“出站规则”，选择“新规则”. Step_2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在规则类型页面中选择要创建的规则类型为“程序”，单击“下一步” Step_3在程序页面中选择“此程序路径”，并输入“%ProgramFiles%\\Internet Explorer\\ iexplore. exe”，然后单击“下一步”按钮 Step_4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在操作页面中选择“阻止连接”，单击“下一步” Step_5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在配置文件页面中选择“域”、“专用”、“公用”，单击“下一步” Step_6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在名称页面中输入名称和描述，然后单击“完成”按钮 Step_7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单击出站规则，查看创建的“IE出站”规则&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在本地计算机上通过IE访问Web服务器，结果如下所示:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单击“诊断连接问题”，查看Windows网络诊断结果,如下所示: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过对入站和出站规则的合理设置，系统的安全性将大大增强，从而能够更有效地增强计算机的安全性。","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Windows","slug":"技术/Windows","permalink":"http://blog.cnjie.net/categories/技术/Windows/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://blog.cnjie.net/tags/Windows/"},{"name":"防火墙","slug":"防火墙","permalink":"http://blog.cnjie.net/tags/防火墙/"}]},{"title":"sort命令详解","slug":"sort命令详解","date":"2018-04-06T12:47:45.000Z","updated":"2020-07-19T09:37:48.146Z","comments":true,"path":"2018/04/06/sort命令详解/","link":"","permalink":"http://blog.cnjie.net/2018/04/06/sort命令详解/","excerpt":"","text":"工作原理&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。 12345678910[adair@localhost ]$ cat seq.txtbananaapplepearorange[adair@localhost ]$ sort seq.txtapplebananaorangepear sort -u&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-u : unique 唯一，排序并且排除重复项 1234567891011121314151617[adair@localhost ]$ cat seq.txtbananaapplepearorangepear[adair@localhost ]$ sort seq.txtapplebananaorangepearpear[adair@localhost ]$ sort -u seq.txtapplebananaorangepear &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pear由于重复被-u选项无情的移除了。 sort -r&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-r : reverse 反向排序 123456789101112131415161718[adair@localhost ]$ cat number.txt13524[adair@localhost ]$ sort number.txt12345[adair@localhost ]$ sort -r number.txt54321 sort -o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-o : output 将排序结果输出到源文件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort默认将结果输出到标准输出，所以需要重定向才可以将结果写入文件，形如 sort filename &gt; newfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是如果你想把排序结果输出到原文件中，用重定向不可行 12[adair@localhost ]$ sort -r number.txt &gt; number.txt[adair@localhost ]$ cat number.txt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用 -o 参数可以正常输出到源文件 12345678910111213[adair@localhost ]$ cat number.txt13524[adair@localhost ]$ sort -r number.txt -o number.txt[adair@localhost ]$ cat number.txt54321 sort -n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-n ： number 安装数字进行排序，默认数字会被当作字符串进行比较，会出现一下情况 1234567891011121314[adair@localhost ]$ cat number.txt110191125[adair@localhost ]$ sort number.txt110111925 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用 -n 参数以后 1234567[adair@localhost ]$ sort -n number.txt125101119 sort -t -k 参数&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-t ： tables 指定分隔符，默认tab为分隔符&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-k ： 指定安装哪一个分割区域进行排序 12345678910111213[adair@localhost ]$ cat facebook.txtbanana:30:5.5apple:10:2.5pear:90:2.3orange:20:3.4[adair@localhost ]$ sort -n -k 2 -t : facebook.txt# -n 按照数字进行排序# -t 此例中指定 ： 为分隔符# -k 此例中按照分割的第二区域进行排序apple:10:2.5orange:20:3.4banana:30:5.5pear:90:2.3 其他的sort常用选项 -f会将小写字母都转换为大写字母来进行比较，亦即忽略大小写 -c会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1 -C会检查文件是否已排好序，如果乱序，不输出内容，仅返回1 -M会以月份来排序，比如JAN小于FEB等等 -b会忽略每一行前面的所有空白部分，从第一个可见字符开始比较。","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Linux","slug":"技术/Linux","permalink":"http://blog.cnjie.net/categories/技术/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"命令","slug":"命令","permalink":"http://blog.cnjie.net/tags/命令/"}]},{"title":"批量删除大量文件","slug":"批量删除大量文件","date":"2018-04-06T12:37:36.000Z","updated":"2020-07-19T09:37:51.822Z","comments":true,"path":"2018/04/06/批量删除大量文件/","link":"","permalink":"http://blog.cnjie.net/2018/04/06/批量删除大量文件/","excerpt":"","text":"批量删除大量文件 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当正常进行删除是，会出现如下报错&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“Argument list too long” &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用如下方法可解决 12345ls | xargs -n 10 rm -fr lsfind ./ -type f |xargs -n 10 -I &#123;&#125; rm -rf &#123;&#125; \\;find . -name \"*\" | xargs -n 10 rm -rf '*'xargs -n 数目 按照10个分组进行删除","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Linux","slug":"技术/Linux","permalink":"http://blog.cnjie.net/categories/技术/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"命令","slug":"命令","permalink":"http://blog.cnjie.net/tags/命令/"}]},{"title":"python--[基础]","slug":"python-基础","date":"2018-02-04T12:33:26.000Z","updated":"2020-07-19T09:37:10.000Z","comments":true,"path":"2018/02/04/python-基础/","link":"","permalink":"http://blog.cnjie.net/2018/02/04/python-基础/","excerpt":"","text":"用户交互Linux（输出） 123$ python&gt;&gt;&gt; print(\"Hello World!\")Hello World! &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;print是一个常用函数，其功能就是输出括号中得字符串。（在Python 2.x中，print还可以是一个关键字，可写成print ‘Hello World!’）写入以下内容，保存并且退出。 12345678$ cat HelloWorld.py #!/usr/bin/env python #必须声明是什么解释器来解释此脚本print(\"Hello World!\") $ python HelloWorld.py #运行Hello World! $ chmod +x HelloWorld.py #授权并执行$ ./HelloWorld.py Hello World! &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python提供了一个input()，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字： 12345&gt;&gt;&gt; name = input('您的名字:')您的名字:adair&gt;&gt;&gt; name'adair'&gt;&gt;&gt; &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python2.7下的raw_input与input 12345678910111213141516171819&gt;&gt;&gt; type(raw_input)&lt;type 'builtin_function_or_method'&gt;&gt;&gt;&gt; type(input)&lt;type 'builtin_function_or_method'&gt;&gt;&gt;&gt; name=raw_input(\"Please input your name:\")Please input your name:Adair&gt;&gt;&gt; print(name)Adair&gt;&gt;&gt; name1=input(\"Please input your name:\")Please input your name:AdairTraceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; File \"&lt;string&gt;\", line 1, in &lt;module&gt;NameError: name 'Adair' is not defined&gt;&gt;&gt; n=\"Adair\"&gt;&gt;&gt; name1=input(\"Please input your name:\")Please input your name:n&gt;&gt;&gt; print(name1)Adair 注意看python2.7在执行input函数式我们第一次输入Adair是有报错的，然后我重新定义一个变量n赋值为Adair然后在执行name1=input(“Please input your name:”)输入n把n的值传入了，没有报错，也可以正常打印，说明一个问题在Python2.7中input里你传入的参数都会被认为是变量，所以重新定义就不会报错 实例：打印用户输入用户名和密码1234567#!/usr/bin/env python# -*- coding:utf-8 -*-import getpass #导入模块 i1 = raw_input(\"UserName:\")i2 = getpass.getpass(\"PassWord:\")print(i1)print(i2) 注释单行注释1注释符号# 例子： 1#此处为注释内容 多行注释1注释符号：''' ''' 例子： 12345'''注释1注释2注释3''' &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;同样的Python注释语句，可以采用 单引号(‘)、双引号（”）、三单双引号（”””），被注释的语句是不被执行的。 行与缩进&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;学习Python与其他语言最大的区别就是，Python的代码块不使用大括号（{}）来控制类，函数以及其他逻辑判断。python最具特色的就是用缩进来写模块。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;前面我们在写用户交互程序的时候已经说到了缩进在 python 语言中的重要性，现在我们再来总结一下 Python 缩进的规则：&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python 是强制缩进的语言，它通过缩进来确定一个新的逻辑层次的开始和结束，这也是python 语言的最重要的特色之一&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;同一逻辑层次级别的代码缩进必须保持一致&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;顶层逻辑级别的代码必须不能有缩进（新行的开始不能有空格）&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;整个程序的缩进风格应保持一致，一般为 4 个空格或 2 个空格，官方的推荐是用 4 个空格，当然用 tab 键也可以，但是在 Windows 上的 tab 键和 Linux 上的不一致，会导致你在Windows 上开发的程序 copy 到 Linux 上后运行出错，所以还是建议用 4 个空格。 变量与赋值变量&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;整个程序的缩进风格应保持一致，一般为在计算机中，变量就是用来在程序运行期间存储各种需要临时保存可以不断改变的数据的标识符，一个变量应该有一个名字，并且在内存中占据一定的存储单元，在该存储单元中存放变量的值。请注意区分变量名和变量值这两个不同的概念，看下图：声明变量123&gt;&gt;&gt; name = 'adair'&gt;&gt;&gt; name'adair' 声明一个变量为name 值为：adair查看变量内存地址:12&gt;&gt;&gt; id(name)3088793757712 常量&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;刚才说到了变量，还有一概念就是常量，所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在 Python 中，通常用全部大写的变量名表示常量：PI=3.14159265359&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;但事实上 PI 仍然是一个变量， 根本没有任何机制保证 不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。 变量的命名规则 变量名只能是字母，数字或下划线的任意组合 变量名的第一个字符不能是数字 以下关键字不能声明为变量名 不可定义的变量&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以下关键字不能声明为变量名（keyword模块，可以输出当前版本的所有关键字）123&gt;&gt;&gt; import keyword&gt;&gt;&gt; keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 数据类型数字int （整数型）&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在32位机器上，整数的位数为32位，取值范围为-231～231-1，即-2147483648～2147483647在64位系统上，整数的位数为64位，取值范围为-263～263-1，即-9223372036854775808～9223372036854775807 float （浮点型）&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;浮点数用来处理实数，即带有小数的数字。类似于C语言中的double类型，占8个字节（64位），其中52位表示底，11位表示指数，剩下 的一位表示符号。 long（长整型）&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;跟C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。注意，自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母L也不会导致严重后果了。 布尔值&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：1234&gt;&gt;&gt; TrueTrue&gt;&gt;&gt; FalseFalse 字符串&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;字符串类型是python的序列类型，他的本质就是字符序列，而且python的字符串类型是不可以改变的，你无法将原字符串进行修改，但是可以将字符串的一部分复制到新的字符串中，来达到相同的修改效果。 使用引号创建字符串&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;创建字符串类型可以使用单引号或者双引号又或者三引号来创建，实例如下： 单引号 1234&gt;&gt;&gt; name = 'adair'&gt;&gt;&gt; type(name)&lt;class 'str'&gt;&gt;&gt;&gt; 双引号 1234&gt;&gt;&gt; name = \"adair\"&gt;&gt;&gt; type(name)&lt;class 'str'&gt;&gt;&gt;&gt; 三引号 123&gt;&gt;&gt; name = \"\"\"adair\"\"\"&gt;&gt;&gt; type(name)&lt;class 'str'&gt; 字符串所具备的方法 capitalize(self):把值得首字母变大写 123&gt;&gt;&gt; name = 'adair'&gt;&gt;&gt; name.capitalize()'Adair' center(self, width, fillchar=None):内容居中，width：字符串的总宽度；fillchar：填充字符，默认填充字符为空格。 1234567891011121314# 定义一个字符串变量，名为\"name\"，内容为\"hello word\"&gt;&gt;&gt; name = \"hello word\"# 输出这个字符串的长度，用len(value_name)&gt;&gt;&gt; len(name)10# 字符串的总宽度为10，填充的字符为\"*\"&gt;&gt;&gt; name.center(10,\"*\")'hello word'# 如果设置字符串的总长度为11，那么减去字符串长度10还剩下一个位置，这个位置就会被*所占用&gt;&gt;&gt; name.center(11,\"*\")'*hello word'# 是从左到右开始填充&gt;&gt;&gt; name.center(12,\"*\")'*hello word*' count(self, sub, start=None, end=None):sub –&gt; 搜索的子字符串start –&gt; 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。end –&gt; 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。用于统计字符串里某个字符出现的次数,可选参数为在字符串搜索的开始与结束位置。 123456&gt;&gt;&gt; name=\"hello word\"&gt;&gt;&gt; name.count(\"l\") # 默认搜索出来的\"l\"是出现过两次的2# 如果指定从第三个位置开始搜索，搜索到第六个位置，\"l\"则出现过一次&gt;&gt;&gt; name.count(\"l\",3,6)1 encode(self, encoding=None, errors=None):编码，针对unicode 1234# 定义一个变量内容为中文temp = \"中文\"# 把变量的字符集转化为UTF-8temp_unicode = temp.decode(\"utf-8\") endswith(self, suffix, start=None, end=None):suffix –&gt; 后缀，可能是一个字符串，或者也可能是寻找后缀的tuple。start –&gt; 开始，切片从这里开始。end –&gt; 结束，片到此为止。于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。 12345678910&gt;&gt;&gt; string=\"hello word\"# 判断字符串中是否已\"d\"结尾，如果是则返回\"True\"&gt;&gt;&gt; string.endswith(\"d\")True# 判断字符串中是否已\"t\"结尾，不是则返回\"False\"&gt;&gt;&gt; string.endswith(\"t\")False# 制定搜索的位置，实则就是从字符串位置1到7来进行判断，如果第七个位置是\"d\"，则返回True，否则返回False&gt;&gt;&gt; string.endswith(\"d\",1,7)False find(self, sub, start=None, end=None):str –&gt; 指定检索的字符串beg –&gt; 开始索引，默认为0。end –&gt; 结束索引，默认为字符串的长度。检测字符串中是否包含子字符串str，如果指定beg(开始)和end(结束)范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。 1234567&gt;&gt;&gt; string=\"hello word\"# 返回`o`在当前字符串中的位置，如果找到第一个`o`之后就不会再继续往下面寻找了&gt;&gt;&gt; string.find(\"o\")4# 从第五个位置开始搜索，返回`o`所在的位置&gt;&gt;&gt; string.find(\"o\",5)7 index(self, sub, start=None, end=None):str –&gt; 指定检索的字符串beg –&gt; 开始索引，默认为0。end –&gt; 结束索引，默认为字符串的长度。检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。 123456789&gt;&gt;&gt; string=\"hello word\"# 返回字符串所在的位置&gt;&gt;&gt; string.index(\"o\")4# 如果查找一个不存在的字符串那么就会报错&gt;&gt;&gt; string.index(\"a\")Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;ValueError: substring not found isalnum(self):法检测字符串是否由字母和数字组成，如果string至少有一个字符并且所有字符都是字母或数字则返回True,否则返回False 12345678&gt;&gt;&gt; string=\"hes2323\"# 如果存在数字或字母就返回`True`，否则返回`False`&gt;&gt;&gt; string.isalnum()True# 中间有空格返回的就是False了&gt;&gt;&gt; string=\"hello word\"&gt;&gt;&gt; string.isalnum()False isalpha(self):检测字符串是否只由字母组成。 12345678# 如果全部都是字母就返回`True`&gt;&gt;&gt; string=\"helloword\"&gt;&gt;&gt; string.isalpha()True# 否则就返回False&gt;&gt;&gt; string=\"hes2323\"&gt;&gt;&gt; string.isalpha()False isdigit(self):检测字符串是否只由数字组成 1234567# 如果变量里面都是数字就返回`True`，否则就返回`False`&gt;&gt;&gt; string=\"hes2323\"&gt;&gt;&gt; string.isdigit()False&gt;&gt;&gt; string=\"2323\"&gt;&gt;&gt; string.isdigit()True islower(self):检测字符串是否由小写字母组成 1234567# 如果变量内容全部都是小写字母就返回`True`，否则就返回`False`&gt;&gt;&gt; string=\"hesasdasd\"&gt;&gt;&gt; string.islower()True&gt;&gt;&gt; string=\"HelloWord\"&gt;&gt;&gt; string.islower()False isspace(self):检测字符串是否只由空格组成 1234567# 如果变量内容由空格来组成，那么就返回`True`否则就返回`False`&gt;&gt;&gt; string=\" \"&gt;&gt;&gt; string.isspace()True&gt;&gt;&gt; string=\"a\"&gt;&gt;&gt; string.isspace()False istitle(self):检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。 1234567# 如果变量的内容首字母是大写并且其他字母为小写，那么就返回`True`，否则会返回`False`&gt;&gt;&gt; string=\"Hello Word\"&gt;&gt;&gt; string.istitle()True&gt;&gt;&gt; string=\"Hello word\"&gt;&gt;&gt; string.istitle()False isupper(self):检测字符串中所有的字母是否都为大写。 1234567# 如果变量值中所有的字母都是大写就返回`True`，否则就返回`False`&gt;&gt;&gt; string=\"hello word\"&gt;&gt;&gt; string.isupper()False&gt;&gt;&gt; string=\"HELLO WORD\"&gt;&gt;&gt; string.isupper()True join(self, iterable):将序列中的元素以指定的字符连接生成一个新的字符串。 123&gt;&gt;&gt; string=(\"a\",\"b\",\"c\")&gt;&gt;&gt; '-'.join(string)'a-b-c' ljust(self, width, fillchar=None):width –&gt; 指定字符串长度fillchar –&gt; 填充字符，默认为空格返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。 123456&gt;&gt;&gt; string=\"helo word\"&gt;&gt;&gt; len(string)9# 定义的长度减去字符串的长度,剩下的就开始填充&gt;&gt;&gt; string.ljust(15,'*')'helo word******' lower(self):转换字符串中所有大写字符为小写。 1234# 把变量里的大写全部转换成小写&gt;&gt;&gt; string=\"Hello WORD\"&gt;&gt;&gt; string.lower()'hello word' lstrip(self, chars=None):chars –&gt; 指定截取的字符用于截掉字符串左边的空格或指定字符 1234# 从左侧开始删除匹配的字符串&gt;&gt;&gt; string=\"hello word\"&gt;&gt;&gt; string.lstrip(\"hello \")'word' partition(self, sep):str –&gt; 指定的分隔符用来根据指定的分隔符将字符串进行分割，如果字符串包含指定的分隔符，则返回一个3元的tuple，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。 1234# 返回的是一个元组类型&gt;&gt;&gt; string=\"www.ansheng.me\"&gt;&gt;&gt; string.partition(\"ansheng\")('www.', 'ansheng', '.me') replace(self, old, new, count=None):old –&gt; 将被替换的子字符串new –&gt; 新字符串，用于替换old子字符串count –&gt; 可选字符串, 替换不超过count次 12345678910111213141516171819202122把字符串中的 old(旧字符串)替换成new(新字符串)，如果指定第三个参数max，则替换不超过max次&gt;&gt;&gt; string=\"www.ansheng.me\"# 把就字符串`www.`换成新字符串`https://`&gt;&gt;&gt; string.replace(\"www.\",\"https://\")'https://ansheng.me'# 就字符串`w`换成新字符串`a`只替换`2`次&gt;&gt;&gt; string.replace(\"w\",\"a\",2)'aaw.ansheng.me'```python* rfind(self, sub, start=None, end=None):str –&gt; 查找的字符串beg –&gt; 开始查找的位置，默认为0end –&gt; 结束查找位置，默认为字符串的长度返回字符串最后一次出现的位置，如果没有匹配项则返回-1。```python&gt;&gt;&gt; string=\"hello word\"# rfind其实就是反向查找&gt;&gt;&gt; string.rfind(\"o\")7# 指定查找的范围&gt;&gt;&gt; string.rfind(\"o\",0,6)4 rindex(self, sub, start=None, end=None):str –&gt; 查找的字符串beg –&gt; 开始查找的位置，默认为0end –&gt; 结束查找位置，默认为字符串的长度 12345678910返回子字符串str在字符串中最后出现的位置，如果没有匹配的字符串会报异常，你可以指定可选参数[beg:end]设置查找的区间。&gt;&gt;&gt; string=\"hello word\"# 反向查找索引&gt;&gt;&gt; string.rindex(\"o\")7# 如果没有查找到就报错&gt;&gt;&gt; string.rindex(\"a\")Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;ValueError: substring not found rjust(self, width, fillchar=None):width –&gt; 指定填充指定字符后中字符串的总长度fillchar –&gt; 填充的字符，默认为空格 12345678返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串。&gt;&gt;&gt; string=\"hello word\"&gt;&gt;&gt; len(string)10&gt;&gt;&gt; string.rjust(10,\"*\")'hello word'&gt;&gt;&gt; string.rjust(12,\"*\")'**hello word' rsplit(self, sep=None, maxsplit=None):str--&gt; 分隔符，默认为空格 *num* –&gt; 分割次数从右到左通过指定分隔符对字符串进行切片,如果参数num有指定值，则仅分隔num个子字符串 12345&gt;&gt;&gt; string=\"www.ansheng.me\"&gt;&gt;&gt; string.rsplit(\".\",1)['www.ansheng', 'me']&gt;&gt;&gt; string.rsplit(\".\",2)['www', 'ansheng', 'me'] rstrip(self, chars=None):chars –&gt; 指定删除的字符删除string字符串末尾的指定字符（默认为空格）. 1234# 从尾部开始匹配删除&gt;&gt;&gt; string=\"hello word\"&gt;&gt;&gt; string.rstrip(\"d\")'hello wor' split(self, sep=None, maxsplit=None):str--&gt; 分隔符，默认为空格 *num* –&gt; 分割次数从左到右通过指定分隔符对字符串进行切片,如果参数num有指定值，则仅分隔num个子字符串 1234567&gt;&gt;&gt; string=\"www.ansheng.me\"# 指定切一次，以`.`来分割&gt;&gt;&gt; string.split(\".\",1)['www', 'ansheng.me']# 指定切二次，以`.`来分割&gt;&gt;&gt; string.split(\".\",2)['www', 'ansheng', 'me'] splitlines(self, keepends=False):num –&gt; 分割行的次数按照行分隔，返回一个包含各行作为元素的列表，如果num指定则仅切片num个行. 12345678910# 定义一个有换行的变量，`\\n`可以划行&gt;&gt;&gt; string=\"www\\nansheng\\nme\"# 输出内容&gt;&gt;&gt; print(string)wwwanshengme# 把有行的转换成一个列表&gt;&gt;&gt; string.splitlines(1)['www\\n', 'ansheng\\n', 'me'] startswith(self, prefix, start=None, end=None):str –&gt; 检测的字符串strbeg –&gt; 可选参数用于设置字符串检测的起始位置strend –&gt; 可选参数用于设置字符串检测的结束位置检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查。 12345&gt;&gt;&gt; string=\"www.ansheng.me\"&gt;&gt;&gt; string.startswith(\"www\")True&gt;&gt;&gt; string.startswith(\"www\",3)False strip(self, chars=None):chars –&gt; 移除字符串头尾指定的字符移除字符串头尾指定的字符（默认为空格） 12345678910&gt;&gt;&gt; string=\" www.ansheng.me \"&gt;&gt;&gt; string' www.ansheng.me '# 删除空格&gt;&gt;&gt; string.strip()'www.ansheng.me'&gt;&gt;&gt; string=\"_www.ansheng.me_\"# 指定要把左右两边的\"_\"删除掉&gt;&gt;&gt; string.strip(\"_\")'www.ansheng.me' swapcase(self):用于对字符串的大小写字母进行转换，大写变小写，小写变大写 123&gt;&gt;&gt; string=\"hello WORD\"&gt;&gt;&gt; string.swapcase()'HELLO word' title(self):返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写。 123&gt;&gt;&gt; string=\"hello word\"&gt;&gt;&gt; string.title()'Hello Word' translate(self, table, deletechars=None):table –&gt; 翻译表，翻译表是通过maketrans方法转换而来deletechars –&gt; 字符串中要过滤的字符列表根据参数table给出的表(包含 256 个字符)转换字符串的字符, 要过滤掉的字符放到 del 参数中。 upper(self):将字符串中的小写字母转为大写字母 123&gt;&gt;&gt; string=\"hello word\"&gt;&gt;&gt; string.upper()'HELLO WORD' zfill(self, width):width –&gt; 指定字符串的长度。原字符串右对齐，前面填充0返回指定长度的字符串，原字符串右对齐，前面填充0 格式化字符串例子：12345&gt;&gt;&gt; string=\"hello word\"&gt;&gt;&gt; string.zfill(10)'hello word'&gt;&gt;&gt; string.zfill(20)'0000000000hello word' 输出结果:12345678910\"C:\\Program Files\\Python35\\python.exe\" C:/Users/Administrator/PycharmProjects/S12/day1/string_format.pyname:adairage:21job:engineerInformation of adair:Name:adairAge:21Job:engineerProcess finished with exit code 0 第二种方式1234567891011121314#/usr/bin/env python#-*- coding:utf-8-*-__author__ = \"Jie\"name = input(\"name:\")age = input(\"age:\")job = input(\"job:\")msg = '''Information of %s:Name:%sAge:%sJob:%s''' %(name,name,age,job)print(msg) 输出结果：123456789101112\"C:\\Program Files\\Python35\\python.exe\" C:/Users/Administrator/PycharmProjects/S12/day1/string_format.pyname:zhujieage:21job:engineerInformation of zhujie:Name:zhujieAge:21Job:engineerProcess finished with exit code 0 Ps：字符串是%s;整数%d;浮点数%f 列表&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。 创建列表比如列出各类编程语言：123&gt;&gt;&gt; lang1=['python','java','php','c++']&gt;&gt;&gt; lang1['python', 'java', 'php', 'c++'] 支持的方法&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;用dir()函数可以查看此列表能使用的方法12&gt;&gt;&gt; dir(lang1)['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] 索引&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;.index用索引来访问list中每一个位置的元素，索引是从0开始的1234567&gt;&gt;&gt; lang1=['python','java','php','c++']&gt;&gt;&gt; lang1['python', 'java', 'php', 'c++']&gt;&gt;&gt; lang1.index('php')2&gt;&gt;&gt; lang1.index('python')0 切片123456789101112131415&gt;&gt;&gt; lang1=['python','java','php','c++']&gt;&gt;&gt; lang1[1:2]['java']&gt;&gt;&gt; lang1[0:3]['python', 'java', 'php']&gt;&gt;&gt; lang1[:3]['python', 'java', 'php']&gt;&gt;&gt; lang1[:-1]['python', 'java', 'php']&gt;&gt;&gt; lang1[:1]['python']&gt;&gt;&gt; lang1[-1]'c++'&gt;&gt;&gt; lang1[-2]'php' 追加&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;.append(self, p_object)用于在列表末尾添加新的对象，obj – 添加到列表末尾的对象，该方法无返回值，但是会修改原来的列表。 123&gt;&gt;&gt; lang1.append('vue')&gt;&gt;&gt; lang1['python', 'java', 'php', 'c++', 'vue'] 删除最后一个元素&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;.pop(self, index=None)用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值，index– 可选参数，要移除列表元素的对象，该方法返回从列表中移除的元素对象，可以通过pop(index)指定删除类似remove123456&gt;&gt;&gt; lang1.pop()'vue'&gt;&gt;&gt; lang1.pop(0)'python'&gt;&gt;&gt; lang1['java', 'php', 'c++'] 指定删除&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;.remove(self, value)用于移除列表中某个值的第一个匹配项，value – 列表中要移除的对象，该方法没有返回值但是会移除两种中的某个值的第一个匹配项。 12345&gt;&gt;&gt; lang1['java', 'php', 'c++']&gt;&gt;&gt; lang1.remove(\"php\")&gt;&gt;&gt; lang1['java', 'c++'] 指定插入&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;.insert(self, index, p_object)用于将指定对象插入列表，index – 对象obj需要插入的索引位置，obj – 要插入列表中的对象，该方法没有返回值，但会在列表指定位置插123&gt;&gt;&gt; lang1.insert(2,\"nodejs\")&gt;&gt;&gt; lang1['java', 'c++', 'nodejs'] 次数统计&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;.count用于统计某个元素在列表中出现的次数，value – 列表中统计的对象，返回元素在列表中出现的次数。12&gt;&gt;&gt; lang1.count('c++')1 反向存放&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;.reverse(self)用于反向列表中元素，该方法没有返回值，但是会对列表的元素进行反向排序。123&gt;&gt;&gt; lang1.reverse()&gt;&gt;&gt; lang1[&apos;nodejs&apos;, &apos;c++&apos;, &apos;java&apos;] 合并&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;.extend(self, iterable)用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表），seq – 元素列表，该方法没有返回值，但会在已存在的列表中添加新的列表内容12345&gt;&gt;&gt; list1=[1,2,3,4,5]&gt;&gt;&gt; list2=['a','b','c','d','f']&gt;&gt;&gt; list1.extend(list2)&gt;&gt;&gt; list1[1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'f'] 排序&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;.sort(self, cmp=None, key=None, reverse=False)用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数，该方法没有返回值，但是会对列表的对象进行排序。1234&gt;&gt;&gt; list1 = [1,2,3,4,5,7,8,6,5]&gt;&gt;&gt; list1.sort()&gt;&gt;&gt; list1[1, 2, 3, 4, 5, 5, 6, 7, 8] 元组&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python的元组与列表类似，不同之处在于元组的元素不能修改。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;元组使用小括号，列表使用方括号。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。 创建元组123&gt;&gt;&gt; boy=('mayun','aobama','liyanhong','mahuateng')&gt;&gt;&gt; boy('mayun', 'aobama', 'liyanhong', 'mahuateng') 支持的方法12&gt;&gt;&gt; dir(boy)['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index'] 索引12345&gt;&gt;&gt; boy.index('mayun')0&gt;&gt;&gt; boy.index('mahuateng')3&gt;&gt;&gt; 切片1234567891011121314&gt;&gt;&gt; boy[1:2]('aobama',)&gt;&gt;&gt; boy[1:3]('aobama', 'liyanhong')&gt;&gt;&gt; boy[0:3]('mayun', 'aobama', 'liyanhong')&gt;&gt;&gt; boy[:3]('mayun', 'aobama', 'liyanhong')&gt;&gt;&gt; boy[:-1]('mayun', 'aobama', 'liyanhong')&gt;&gt;&gt; boy[:-2]('mayun', 'aobama')&gt;&gt;&gt; boy[:1]('mayun',) list和tuple互转123456789101112&gt;&gt;&gt; girl1['mahuateng', 'xiaohua', 'yanzi']&gt;&gt;&gt; boy('mayun', 'aobama', 'liyanhong', 'mahuateng')&gt;&gt;&gt; type(gril)&lt;class 'list'&gt;&gt;&gt;&gt; type(boy)&lt;class 'tuple'&gt;&gt;&gt;&gt; tuple(girl1)('mahuateng', 'xiaohua', 'yanzi')&gt;&gt;&gt; list(boy)['mayun', 'aobama', 'liyanhong', 'mahuateng'] 字典创建字典&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;每个键与值用冒号隔开（:），每对用逗号分割，整体放在花括号中（{}）。1234567&gt;&gt;&gt; person = &#123;\"name\":\"adair\",\"age\":18&#125;&gt;&gt;&gt; person&#123;'age': 18, 'name': 'adair'&#125;&gt;&gt;&gt; person1 = dict(&#123;\"name\":\"adair\",\"age\":18&#125;)&gt;&gt;&gt; person1&#123;'age': 18, 'name': 'adair'&#125;&gt;&gt;&gt; &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;键必须独一无二，但值则不必。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;注：type()可以查看变量类型 支持的方法12&gt;&gt;&gt; dir(person)['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values'] 清除内容&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;clear(self),删除字典中的所有元素123456&gt;&gt;&gt; person&#123;'age': 18, 'name': 'adair'&#125;&gt;&gt;&gt; person.clear()&gt;&gt;&gt; person&#123;&#125;&gt;&gt;&gt; 浅复制&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;copy(self)，返回一个字典的浅复制123456&gt;&gt;&gt; person = &#123;\"name\":\"adair\",\"age\":18&#125;&gt;&gt;&gt; person1 = person.copy()&gt;&gt;&gt; person&#123;'age': 18, 'name': 'adair'&#125;&gt;&gt;&gt; person1&#123;'age': 18, 'name': 'adair'&#125; fromkeys(S, v=None):&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;S –&gt; 字典键值列表&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;v –&gt; 可选参数, 设置键序列（seq）的值&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值12345&gt;&gt;&gt; seq = ('name', 'age', 'sex')&gt;&gt;&gt; dict = dict.fromkeys(seq)&gt;&gt;&gt; dict&#123;'age': None, 'name': None, 'sex': None&#125;&gt;&gt;&gt; get(self, k, d=None):&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;key –&gt; 字典中要查找的键&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;default –&gt; 如果指定键的值不存在时，返回该默认值值&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;返回指定键的值，如果值不在字典中返回默认值123456&gt;&gt;&gt; person = &#123;\"name\":\"adair\",\"age\":18,\"sex\":\"boy\"&#125;&gt;&gt;&gt; person.get(\"sex\")'boy'&gt;&gt;&gt; person.get(\"aaa\")&gt;&gt;&gt; person.get(\"aaa\",\"hehe\")'hehe' has_key(self, k)&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;（注：3.x已经不存在这个函数）&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;用于判断键是否存在于字典中，如果键在字典dict里返回true，否则返回false 12345678910&gt;&gt;&gt; person = &#123;\"name\": \"mr.wu\", 'age': 18&#125;# key在字典中存在就返回`True`&gt;&gt;&gt; person.has_key(\"name\")True# 不存在就返回`False`&gt;&gt;&gt; person.has_key(\"sex\")False#Python3.x实现方式&gt;&gt;&gt; person = &#123;\"name\":\"adair\",\"age\":18,\"sex\":\"boy\"&#125;&gt;&gt;&gt; ret = \"name\" in person items(self)&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以列表返回可遍历的(键, 值)元组数组123&gt;&gt;&gt; dic=&#123;'name':'adair','age':'21','job':'IT'&#125;&gt;&gt;&gt; dic.items()dict_items([('age', '21'), ('name', 'adair'), ('job', 'IT')]) keys(self)&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以列表返回一个字典所有的键。123&gt;&gt;&gt; dic=&#123;'name':'adair','age':'21','job':'IT'&#125;&gt;&gt;&gt; dic.keys()dict_keys(['age', 'name', 'job']) pop(self, k, d=None)&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;获取并在字典中移除，k – 要在字典中查找的键。12345&gt;&gt;&gt; dic=&#123;'name':'adair','age':'21','job':'IT'&#125;&gt;&gt;&gt; dic.pop('job')'IT'&gt;&gt;&gt; dic&#123;'age': '21', 'name': 'yaoyao'&#125; popitem(self)&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;获取并在字典中移除12345&gt;&gt;&gt; dic=&#123;'name':'yaoyao','age':'21','job':'IT'&#125;&gt;&gt;&gt; dic.popitem()('age', '21')&gt;&gt;&gt; dic&#123;'name': 'yaoyao', 'job': 'IT'&#125; setdefault&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;setdefault(self, k, d=None)如果key不存在，则创建，如果存在，则返回已存在的值且不修改1234&gt;&gt;&gt; dic=&#123;'name':'yaoyao','age':'21','job':'IT'&#125;&gt;&gt;&gt; dic.setdefault('sex')&gt;&gt;&gt; dic&#123;'sex': None, 'age': '21', 'name': 'yaoyao', 'job': 'IT'&#125; update(self, E=None, **F)&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;更新一个字典到另外一个字典12345&gt;&gt;&gt; dic=&#123;'name':'yaoyao','age':'21','job':'IT'&#125;&gt;&gt;&gt; dic_1=&#123;'sex':'man'&#125;&gt;&gt;&gt; dic.update(dic_1)&gt;&gt;&gt; dic&#123;'sex': 'man', 'age': '21', 'name': 'yaoyao', 'job': 'IT'&#125; values(self)&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以列表返回字典中的所有值。123&gt;&gt;&gt; dic=&#123;'name':'yaoyao','age':'21','job':'IT'&#125;&gt;&gt;&gt; dic.values()dict_values(['21', 'yaoyao', 'IT']) 删除指定索引的键值对1234&gt;&gt;&gt; test=&#123;\"a\":1,\"b\":2,&#125;&gt;&gt;&gt; del test[\"a\"]&gt;&gt;&gt; test&#123;'b': 2&#125; 获取全部的键值对1234567891011&gt;&gt;&gt; user_info=&#123;\"name\":\"adair\",\"age\":81,\"gender\":'M',&#125;&gt;&gt;&gt; for k,v in user_info.items():... print (\"This is key:%s\"%(k))... print (\"This is value:%s\"%(v))...This is key:nameThis is value:adairThis is key:genderThis is value:MThis is key:ageThis is value:81 集合集合（set）&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;把不同的元素组成一起形成集合，是python基本的数据类型。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;集合元素(set elements):组成集合的成员&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;python的set和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素. 集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;sets 支持 x in set, len(set),和 for x in set。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;作为一个无序的集合，set不记录元素位置或者插入点。因此，sets不支持 indexing, slicing, 或其它类序列（sequence-like）的操作。 集合的创建123456789&gt;&gt;&gt; se = set([11,22,33,44])&gt;&gt;&gt; print(se)&#123;33, 11, 44, 22&#125;&gt;&gt;&gt; print(type(se))&lt;class 'set'&gt;或者&gt;&gt;&gt; se=&#123;'adair','jie'&#125;&gt;&gt;&gt; se&#123;'jie', 'adair'&#125; 集合的具体用法 add(添加元素) 12345&gt;&gt;&gt; se&#123;'jie', 'adair'&#125;&gt;&gt;&gt; se.add('123')&gt;&gt;&gt; se&#123;'123', 'jie', 'adair'&#125; clear(清空集合) 12345&gt;&gt;&gt; se&#123;'123', 'jie', 'adair'&#125;&gt;&gt;&gt; se.clear()&gt;&gt;&gt; seset() copy（浅拷贝）1234&gt;&gt;&gt; se_1=&#123;'adair','jie'&#125;&gt;&gt;&gt; se_2=se_1.copy()&gt;&gt;&gt; se_2&#123;'jie', 'adair'&#125; difference差异比较 12345678&gt;&gt;&gt; se_1 = &#123;'adair','jie','shi','shei'&#125;&gt;&gt;&gt; se_2 = &#123;'hao','xiang','shi','jie'&#125;#取出se_2中在se_1所没有的元素&gt;&gt;&gt; se_1.difference(se_2)&#123;'shei', 'adair'&#125;#取出se_1中在se_2所没有的元素&gt;&gt;&gt; se_2.difference(se_1)&#123;'xiang', 'hao'&#125; differemce_update差异更新 12345678&gt;&gt;&gt; se_1&#123;'shi', 'jie', 'shei', 'adair'&#125;&gt;&gt;&gt; se_2&#123;'xiang', 'shi', 'jie', 'hao'&#125;&gt;&gt;&gt; se_1.difference_update(se_2)&gt;&gt;&gt; se_1&#123;'shei', 'adair'&#125;#有点类似与去除共同的 discard移除指定元素 12345&gt;&gt;&gt; se_1&#123;'shei', 'adair'&#125;&gt;&gt;&gt; se_1.discard('shei')&gt;&gt;&gt; se_1&#123;'adair'&#125; intersection取交集并且建立新的集合 1234&gt;&gt;&gt; se_1=&#123;'adair','jie','shi','boy'&#125;&gt;&gt;&gt; se_2=&#123;'adair','jie','shi','gril'&#125;&gt;&gt;&gt; se_1.intersection(se_2)&#123;'shi', 'jie', 'adair'&#125; intersection_update取交集并且更新原来的集合 1234567&gt;&gt;&gt; se_1&#123;'shi', 'jie', 'boy', 'adair'&#125;&gt;&gt;&gt; se_2&#123;'shi', 'gril', 'jie', 'adair'&#125;&gt;&gt;&gt; se_1.intersection_update(se_2)&gt;&gt;&gt; se_1&#123;'shi', 'jie', 'adair'&#125; isdisjoint判断没有交集，没有返回true，有返回false 1234567891011&gt;&gt;&gt; se_1=&#123;'adair','jie','shi','hao','ren'&#125;&gt;&gt;&gt; se_2=&#123;'adair','jie','shi','huai','ren'&#125;&gt;&gt;&gt; se_1.isdisjoint(se_2)False&gt;&gt;&gt; se_2.isdisjoint(se_1)False或&gt;&gt;&gt; se_1=&#123;'adair','jiee'&#125;&gt;&gt;&gt; se_2=&#123;'adairr','jiee'&#125;&gt;&gt;&gt; se_2.isdisjoint(se_1)True issubset判断是否为子集 12345&gt;&gt;&gt; se_1 = &#123;'adair','jie'&#125;&gt;&gt;&gt; se_2 = &#123;'adair','jie','shabi'&#125;#判断se_1是否为se_2的子集&gt;&gt;&gt; se_1.issubset(se_2)True issuperset判断是否为父集 123456789&gt;&gt;&gt; se_1 = &#123;'adair','jie'&#125;&gt;&gt;&gt; se_2 = &#123;'adair','jie','shabi'&#125;#判断se_1是否为se_2的父集&gt;&gt;&gt; se_1.issuperset(se_2)False#判断se_2是否为se_1的父集&gt;&gt;&gt; se_2.issuperset(se_1)True&gt;&gt;&gt; pop移除集合元素 123&gt;&gt;&gt; se_1 = &#123;'adair','jie','sha','bi'&#125;&gt;&gt;&gt; se_1.pop()'sha' remove删除指定元素集合 12345&gt;&gt;&gt; se_1 = &#123;'adair','jie','sha','bi'&#125;&gt;&gt;&gt; se_1.remove('bi')&gt;&gt;&gt; se_1&#123;'sha', 'adair', 'jie'&#125;&gt;&gt;&gt; symmetric_difference取两个集合的差集，并建立新的元素 1234567&gt;&gt;&gt; se_1 = &#123;'adair','jie','sha','bi'&#125;&gt;&gt;&gt; se_2 = &#123;'adair','jie','shabi'&#125;&gt;&gt;&gt; se_1.symmetric_difference(se_2)&#123;'sha', 'shabi', 'bi'&#125;&gt;&gt;&gt; b=se_1.symmetric_difference(se_2)&gt;&gt;&gt; b&#123;'sha', 'shabi', 'bi'&#125; symmetric_difference_update取两个集合的差集，更新原来的集合对象 12345&gt;&gt;&gt; se_1 = &#123;'adair','jie','sha','bi'&#125;&gt;&gt;&gt; se_2 = &#123;'adair','jie','shabi'&#125;&gt;&gt;&gt; se_1.symmetric_difference_update(se_2)&gt;&gt;&gt; se_1&#123;'sha', 'shabi', 'bi'&#125; union并集 123456&gt;&gt;&gt; se_1&#123;'sha', 'shabi', 'bi'&#125;&gt;&gt;&gt; se_2&#123;'shabi', 'adair', 'jie'&#125;&gt;&gt;&gt; se_1.union(se_2)&#123;'jie', 'sha', 'shabi', 'adair', 'bi'&#125; update更新集合 1234&gt;&gt;&gt; se_1=&#123;'sha','shabi','bi'&#125;&gt;&gt;&gt; se_1.update('adairjie')&gt;&gt;&gt; se_1&#123;'d', 'shabi', 'sha', 'r', 'a', 'e', 'i', 'j', 'bi'&#125; 案例差异对比12345678910111213141516171819202122232425old_dict = &#123; \"#1\":&#123; 'hostname':'c1', 'cpu_count': 2, 'mem_capicity': 80 &#125;, \"#2\":&#123; 'hostname':'c1', 'cpu_count': 2, 'mem_capicity': 80 &#125;, \"#3\":&#123; 'hostname':'c1', 'cpu_count': 2, 'mem_capicity': 80 &#125;&#125;new_dict = &#123; \"#1\":&#123; 'hostname':'c1', 'cpu_count': 2, 'mem_capicity': 800 &#125;, \"#3\":&#123; 'hostname':'c1', 'cpu_count': 2, 'mem_capicity': 80 &#125;, \"#4\":&#123; 'hostname':'c2', 'cpu_count': 2, 'mem_capicity': 80 &#125;&#125;#获取old_dict元素old = set(old_dict.keys())print(old)#获取new_dict元素new = set(new_dict.keys())print(new)#要更新的集合元素（交集）update_set = old.intersection(new)print(update_set)#获取要删除的集合元素（差集）delete_set = old.difference(new)print(delete_set)#获取要添加的集合元素()add_set = new.difference(update_set)print(add_set) 运算符算术运算&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以下假设a为10，b为20 比较运算&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以下假设a为10，b为20 赋值运算符&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以下假设a为10，b为20 位运算&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下： 逻辑运算符&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python语言支持逻辑运算符，以下假设变量a为10，变量b为20： 成员运算符 身份运算符&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;身份运算符用于比较两个对象的存储单元 运算符优先级","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Python编程","slug":"技术/Python编程","permalink":"http://blog.cnjie.net/categories/技术/Python编程/"}],"tags":[{"name":"python","slug":"python","permalink":"http://blog.cnjie.net/tags/python/"}]},{"title":"python--[介绍]","slug":"python-介绍","date":"2018-02-04T08:40:54.000Z","updated":"2020-07-19T09:37:00.840Z","comments":true,"path":"2018/02/04/python-介绍/","link":"","permalink":"http://blog.cnjie.net/2018/02/04/python-介绍/","excerpt":"","text":"Python简介&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python是一种简单易学，功能强大的编程语言，它有高效率的高层数据结构，简单而有效地实现面向对象编程。Python简洁的语法和对动态输入的支持，再加上解释性语言的本质，使得它在大多数平台上的许多领域都是一个理想的脚本语言，特别适用于快速的应用程序开发。 Python可以应用于众多领域，如：数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。（引用于菜鸟教程） Python特点 易于学习：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。 易于阅读：Python代码定义的更清晰。 易于维护：Python的成功在于它的源代码是相当容易维护的。 一个广泛的标准库：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。 互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。 可移植：基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。 可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。 数据库：Python提供所有主要的商业数据库的接口。 GUI编程：Python支持GUI可以创建和移植到许多系统调用。 可嵌入: 你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力。（引用于菜鸟教程） Python版本区别1.使用方法 122.7版本print \"adair\"或者print(\"adair\")3.x版本print(\"adair\") 2.Py3.X源码文件默认使用utf-8编码3.模块命名修改 Old Name New Name _winreg winreg ConfigParser configparser copy_reg copyreg Queue queue SocketServer sockerserver makrupbase _makrupbase repl reprlib test.test_support test.support 4.语法 去除了&lt;&gt;，全部改用!= 去除``，全部改用repr() 关键词加入as 和with，还有True,False,None 整型除法返回浮点数，要得到整型结果，请使用// 加入nonlocal语句。使用noclocal x可以直接指派外围（非全局）变量 去除print语句，加入print()函数实现相同的功能。同样的还有 exec语句，已经改为exec()函数 改变了顺序操作符的行为，例如x&lt;y，当x和y类型不匹配时抛出TypeError而不是返回随即的 bool值 输入函数改变了，删除了raw_input，用input代替： 去除元组参数解包。不能def(a, (b, c)):pass这样定义函数了 新式的8进制字变量，相应地修改了oct()函数。 .class Foo:这种写法不能用了，改成class Foo(object) Python解释器1.Cpython&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python的官方版本，使用C语言实现，使用最为广泛，CPython实现会将源文件（py文件）转换成字节码文件（pyc文件），然后运行在Python虚拟机上 程序—-（c解释器）—-（字节码）—-（机器码）—–cpu 2.Jyhton&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python的Java实现，Jython会将Python代码动态编译成Java字节码，然后在JVM上运行。 程序—-（java解释器）—-（字节码）—-（机器码）—–cpu 3.IronPython&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python的C#实现，IronPython将Python代码编译成C#字节码，然后在CLR上运行。（与Jython类似） 程序—-（c#解释器）—-（字节码）—-（机器码）—–cpu 4.PyPy（特殊）&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Python实现的Python，将Python的字节码字节码再编译成机器码。 程序—-（c#解释器）—-（字节码）—-（机器码）—–cpu pyc文件&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;执行Python代码时，如果导入了其他的 .py 文件，那么，执行过程中会自动生成一个与其同名的 .pyc 文件，该文件就是Python解释器编译之后产生的字节码。ps：代码经过编译可以产生字节码；字节码通过反编译也可以得到代码。 Python安装下载地址：https://www.python.org/downloads/ Windows下的安装 Linux下的安装（CentOS下）1.先安装GCC1yum -y install gcc 2.下载Python-2.7.21wget http://python.org/ftp/python/2.7.2/Python-2.7.2.tar.bz2 3.解压Python-2.7.21tar -jxvf Python-2.7.2.tar.bz2 4.进入刚解压后的文件夹(可使用命令):1cd Python-2.7.2 5.安装12345./configuremake allmake installmake cleanmake distclean 6.查看版本信息1/usr/local/bin/python2.7 -V Pycharm开发工具的介绍和使用&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;PyCharm一个很棒的python开发工具，分为社区版本和专业版，社区版只有基础的python环境，专业版的功能会多很多 第一次打开使用&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;第一次打开Python显示如下页面，此处选择“Create New Project”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;上面结束后会来到下面页面，我们可以选择项目存放的路径，以及使用python的版本配置好之后我们选择“create”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;上面执行完我们的第一个项目就建立了&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;根据上面的步骤我创建了两个文件夹day1，day2 创建第一个python文件&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在day1下创建一个新的代码命名为test.py&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;至此第一个python文件就创建完成了&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;对上述文件改名 书写第一个代码&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;毫无疑问根据编程语言的历史，要写的第一个程序是打印“Hello World”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;执行该程序 配置开头默认的解释器内容 配置默认字体大小 配置Pycharm连接github绑定账号会出现github，然后在旁边输入你github的用户名和密码，可以点击”test”测试一下，如果出现： 创建Github的仓库点击VSC——Import into Version Control——Share Project on Github然后会弹出框让你输入一个仓库名（不能为中文）然后点击share然后会弹出让你选择哪些文件需要被同步，选好后，在下面的commit Message可以输入自己的信息，然后点OK，你的代码就提交到网上了。可以看看 修改后的文件提交对修改后的文件或目录点击右键：Git——Add，先把文件放入暂存区然后点击刚才Add上面的commit file然填好commit的信息后，点击下面的commit and Push，可以直接提交到网上","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Python编程","slug":"技术/Python编程","permalink":"http://blog.cnjie.net/categories/技术/Python编程/"}],"tags":[{"name":"python","slug":"python","permalink":"http://blog.cnjie.net/tags/python/"}]},{"title":"配置当前用户使用国内pip源","slug":"配置当前用户使用国内pip源","date":"2018-02-04T08:12:03.000Z","updated":"2020-07-19T09:37:41.816Z","comments":true,"path":"2018/02/04/配置当前用户使用国内pip源/","link":"","permalink":"http://blog.cnjie.net/2018/02/04/配置当前用户使用国内pip源/","excerpt":"","text":"国内镜像站12345中国科学技术大学 : https://pypi.mirrors.ustc.edu.cn/simple清华：https://pypi.tuna.tsinghua.edu.cn/simple豆瓣：http://pypi.douban.com/simple/华中理工大学 : http://pypi.hustunique.com/simple山东理工大学 : http://pypi.sdutlinux.org/simple Windows配置方法用notepad++创建pip.ini文件，保存位置为%USERPROFILE%\\pip\\pip.ini.%USERPROFILE%具体指的是什么目录，可以cmd命令行中输入set，查看所有系统变量，找到USERPROFILE,我的为C:\\Users\\adair-0101.pip.ini文件内容如下：123[global]timeout = 300index-url = http://pypi.douban.com/simple Ubuntu下配置进去Ubuntu终端做如下配置12345678910$ mkdir ~/.pip/$ touch ~/.pip/pip.conf$ vim ~/.pip/pip.conf[global]index-url = http://pypi.douban.com/simpledownload_cache = ~/.cache/pip[install]use-mirrors = truemirrors = http://pypi.douban.com/trusted-host = pypi.douban.com","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Python编程","slug":"技术/Python编程","permalink":"http://blog.cnjie.net/categories/技术/Python编程/"}],"tags":[{"name":"python","slug":"python","permalink":"http://blog.cnjie.net/tags/python/"}]},{"title":"Ubuntu 16.04开启SSH服务","slug":"Ubuntu-16-04开启SSH服务","date":"2018-02-04T07:57:50.000Z","updated":"2020-07-19T09:43:04.598Z","comments":true,"path":"2018/02/04/Ubuntu-16-04开启SSH服务/","link":"","permalink":"http://blog.cnjie.net/2018/02/04/Ubuntu-16-04开启SSH服务/","excerpt":"","text":"安装1sudo apt-get install openssh-server 启动1sudo service ssh start 查询服务启动状态123sudo ps -e | grep ssh或者sudo service ssh status 配置开机启动1sudo sysv-rc-conf 把上面四项都选上。 修改默认端口1sudo vim /etc/ssh/sshd_config 找到Port 22，然后改成相应的端口。建议先保留22端口的。后面连接成功了之后再删除22端口，保险起见。 重启服务1sudo service ssh restart 查看状态1netstat -an | grep \"LISTEN \" 用端口进行连接1ssh username@ip -p 50022 连接成功之后记得把22端口去除。 注意：如果开通了ufw防火墙的要加入规则，默认端口为22。在Ubuntu下防火墙建议使用ufw进行管理，主要是方便操作。","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Linux","slug":"技术/Linux","permalink":"http://blog.cnjie.net/categories/技术/Linux/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://blog.cnjie.net/tags/Ubuntu/"}]},{"title":"Ubuntu16.04配置静态IP","slug":"Ubuntu16-04配置静态IP","date":"2018-02-04T07:53:59.000Z","updated":"2020-07-19T09:42:59.447Z","comments":true,"path":"2018/02/04/Ubuntu16-04配置静态IP/","link":"","permalink":"http://blog.cnjie.net/2018/02/04/Ubuntu16-04配置静态IP/","excerpt":"","text":"1,编辑配置文件1sudo vi /etc/network/interfaces #添加内容：123456auto ens3iface ens3 inet staticaddress 192.168.8.100 netmask 255.255.255.0gateway 192.168.8.2dns-nameserver 119.29.29.29 2,重启网卡1sudo /etc/init.d/networking restart","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Linux","slug":"技术/Linux","permalink":"http://blog.cnjie.net/categories/技术/Linux/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://blog.cnjie.net/tags/Ubuntu/"}]},{"title":"解决VMWARE克隆后网卡不为eth0的问题","slug":"解决VMWARE克隆后网卡不为eth0的问题","date":"2017-08-05T09:44:25.000Z","updated":"2020-07-19T08:34:57.206Z","comments":true,"path":"2017/08/05/解决VMWARE克隆后网卡不为eth0的问题/","link":"","permalink":"http://blog.cnjie.net/2017/08/05/解决VMWARE克隆后网卡不为eth0的问题/","excerpt":"","text":"&emsp;&emsp;通常情况下vmware克隆后的机器网卡都会发生变化，对于有强迫症状的人是一件很痛苦的事儿，所以在每次克隆机器之后可以执行下面的脚本，以便将网卡改为eth012345678910111213#!/bin/bashif [ $# -ne 1 ]thenecho \"USAGE:$0 HOSTNAME\"exit 1fiRULES_PATH=\"/etc/udev/rules.d/70-persistent-net.rules\"ETH0_PATH=\"/etc/sysconfig/network-scripts/ifcfg-eth0\"MAC=`dmesg |grep eth0|grep -E -o \"[0-9a-fA-F]&#123;2&#125;(:[0-9a-fA-F]&#123;2&#125;)&#123;5&#125;\"`RULES_MAC=`cat /etc/udev/rules.d/70-persistent-net.rules |grep -E -o \"[0-9a-fA-F]&#123;2&#125;(:[0-9a-fA-F]&#123;2&#125;)&#123;5&#125;\"`ETH0_MAC=`cat /etc/sysconfig/network-scripts/ifcfg-eth0 |grep -E -o \"[0-9a-fA-F]&#123;2&#125;(:[0-9a-fA-F]&#123;2&#125;)&#123;5&#125;\"`sed -i \"s/$RULES_MAC/$MAC/g\" $RULES_PATHsed -i \"s/$ETH0_MAC/$MAC/g\" $ETH0_PATHsed -i \"s/localhost.localdomain/$1/g\" /etc/sysconfig/network 执行方式：执行的时候需要传入你需要设定的主机名1sh Change.sh youhostname","raw":null,"content":null,"categories":[{"name":"工作","slug":"工作","permalink":"http://blog.cnjie.net/categories/工作/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"shell","slug":"shell","permalink":"http://blog.cnjie.net/tags/shell/"},{"name":"脚本","slug":"脚本","permalink":"http://blog.cnjie.net/tags/脚本/"}]},{"title":"Red_Hat配置清华源","slug":"Red_Hat配置清华源","date":"2017-08-05T08:54:25.000Z","updated":"2020-07-19T09:43:09.863Z","comments":true,"path":"2017/08/05/Red_Hat配置清华源/","link":"","permalink":"http://blog.cnjie.net/2017/08/05/Red_Hat配置清华源/","excerpt":"","text":"Red-Hat使用清华源具体操作步骤：12345# cd /etc/yum.repos.d/# cp rhel-source.repo rhel-source.repo.bak# &gt; rhel-source.repo #清空，然后将下面的一段复制进去即可# yum clean all# yum makecache 备份原有的yum源，将里面的内容改为下面的内容即可123456[rhel-source-beta]name=Red Hat Enterprise Linux $releasever Beta - $basearch - Sourcebaseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/6/os/x86_64/enabled=1gpgcheck=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-beta,file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Linux","slug":"技术/Linux","permalink":"http://blog.cnjie.net/categories/技术/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"shell","slug":"shell","permalink":"http://blog.cnjie.net/tags/shell/"},{"name":"脚本","slug":"脚本","permalink":"http://blog.cnjie.net/tags/脚本/"}]},{"title":"某项目部署","slug":"某项目部署","date":"2017-06-25T08:54:25.000Z","updated":"2020-07-19T09:35:43.373Z","comments":true,"path":"2017/06/25/某项目部署/","link":"","permalink":"http://blog.cnjie.net/2017/06/25/某项目部署/","excerpt":"","text":"环境 物理机 IBM X3650 M4 RHEL 6.4 itspafcmail01 IP:10.183.104.11 IBM X3650 M4 RHEL 6.4 itspafcmail01 IP:10.183.104.12 DRBD服务安装drbdwget http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm red hat 本身的源有问题，更改为清华源后可以解决 12[root@itspafcmail01 Tools]# yum install drbd kmod-drbd84 -y[root@itspafcmail01 Tools]# modprobe drbd 安装完后加载模块不成功，需要重启解决，虚拟机下可不用重启直接加载 配置文件主节点配置： 12345678910111213141516171819202122232425262728global &#123; usage-count no;&#125;common &#123; syncer &#123; rate 100M; verify-alg crc32c; &#125;&#125;# primary for drbd1resource data &#123; protocol C; disk &#123; on-io-error detach; &#125; on itspafcmail01 &#123; device /dev/drbd0; disk /dev/mapper/vg_0-lv_maildata; address 192.168.1.1:7788; meta-disk internal; &#125; on itspafcmail02 &#123; device /dev/drbd0; disk /dev/mapper/vg_0-1v_maildata; address 192.168.1.2:7788; meta-disk internal; &#125;&#125; 备节点配置 12345678910111213141516171819202122232425262728global &#123; usage-count no;&#125;common &#123; syncer &#123; rate 100M; verify-alg crc32c; &#125;&#125;# primary for drbd1resource data &#123; protocol C; disk &#123; on-io-error detach; &#125; on itspafcmail01 &#123; device /dev/drbd0; disk /dev/mapper/vg_0-lv_maildata; address 192.168.1.1:7788; meta-disk internal; &#125; on itspafcmail02 &#123; device /dev/drbd0; disk /dev/mapper/vg_0-1v_maildata; address 192.168.1.2:7788; meta-disk internal; &#125;&#125; 主节点操作初始化DRBD的metadata（Create device metadata.）==》主机12345678910111213[root@itspafcmail01 ~]# drbdadm create-md datamd_offset 420814516224al_offset 420814483456bm_offset 420801638400Found some data ==&gt; This might destroy existing data! &lt;==Do you want to proceed?[need to type &apos;yes&apos; to confirm] yesinitializing activity logNOT initializing bitmapWriting meta data...New drbd meta data block successfully created. 启动并查看12345[root@itspafcmail01 ~]# drbdadm up all[root@itspafcmail01 ~]# cat /proc/drbdversion: 8.4.9-1 (api:1/proto:86-101)`GIT-hash: 9976da086367a2476503ef7f6b13d4567327a280 build by mockbuild@Build64R6, 2016-12-13 18:38:15 0: cs:WFConnection ro:Secondary/Unknown ds:Inconsistent/DUnknown C r----s ns:0 nr:0 dw:0 dr:0 al:8 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:410939100` 备点操作初始化DRBD的metadata（Create device metadata.）==》备机12345678910111213[root@itspafcmail02 ~]# drbdadm create-md datamd_offset 420814516224al_offset 420814483456bm_offset 420801638400Found some data ==&gt; This might destroy existing data! &lt;==Do you want to proceed?[need to type &apos;yes&apos; to confirm] yesinitializing activity logNOT initializing bitmapWriting meta data...New drbd meta data block successfully created. 启动并查看12345[root@itspafcmail02 ~]# cat /proc/drbdversion: 8.4.9-1 (api:1/proto:86-101)GIT-hash: 9976da086367a2476503ef7f6b13d4567327a280 build by mockbuild@Build64R6, 2016-12-13 18:38:15 0: cs:WFConnection ro:Secondary/Unknown ds:Inconsistent/DUnknown C r----s ns:0 nr:0 dw:0 dr:0 al:8 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:410939100 目前主备都为Unknow状态，有可能是网络不通导致的已关闭iptables和setlinux后解决 同步数据只需要在一端操作，此处在主节点操作 12[root@data-1-1 ~]# drbdadm primary data#如果出现“drbdsetup-84 primary 0”错误可用下面方式执行[root@data-1-1 ~]# drbdadm -- --overwrite-data-of-peer primary data#上面这步操作会非常旧，需要确定彻底执行完毕才可进行接下来的操作 同步完后的结果，在从节点看到的内容 1234[root@itspafcmail02 ~]# cat /proc/drbdversion: 8.4.9-1 (api:1/proto:86-101)GIT-hash: 9976da086367a2476503ef7f6b13d4567327a280 build by mockbuild@Build64R6, 2016-12-13 18:38:15 0: cs:Connected ro:Secondary/Primary ds:UpToDate/UpToDate C r----- ns:0 nr:410939100 dw:410939100 dr:0 al:8 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:0 格式化并挂载123[root@itspafcmail01 ~]# mkfs.ext4 /dev/drbd0[root@itspafcmail01 ~]# mkdir /maildata/[root@itspafcmail01 ~]# mount /dev/drbd0 /maildata#并在maildata下创建一个测试用的文件，确保同步完毕之后进行故障模拟操作 再次查看状态： 1234[root@itspafcmail01 ~]# cat /proc/drbdversion: 8.4.9-1 (api:1/proto:86-101)GIT-hash: 9976da086367a2476503ef7f6b13d4567327a280 build by mockbuild@Build64R6, 2016-12-13 18:38:15 0: cs:Connected ro:Primary/Secondary ds:UpToDate/UpToDate C r----- ns:417499764 nr:0 dw:6560664 dr:410940969 al:1696 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:0 状态说明 ro是角色信息 Primary/Secondary（代表这个是主节点） Secondary/Primary（代表这个是副节点） ds是磁盘状态 UpToDate/Inconsistent（正在同步，数据还没有一致） UpToDate/UpToDate （同步完成，数据一致） ns是网络传输的数据包 以K为字节 dw 是磁盘写操作 dr 是磁盘读操作 of 运行中（过时的）模块号码 pe 待解决的 模块号码 ua 未答复的 模块号码（最好为0） DRDB模拟测试将主节点设置为备节点 12[root@itspafcmail01 ~]# umount /maildata/[root@itspafcmail01 ~]# drbdadm secondary data 将备用节点设置为主节点 12[root@itspafcmail02 ~]# drbdadm primary data[root@itspafcmail02 ~]# mount /dev/drbd0 /maildata/ 测试完毕后，恢复原来的主备关系 禁止DRBD开机启动两端都需要禁用，由HA控制1234[root@itspafcmail01 ~]# chkconfig --list drbddrbd 0:off 1:off 2:off 3:off 4:off 5:off 6:off[root@itspafcmail02 ~]# chkconfig --list drbddrbd 0:off 1:off 2:off 3:off 4:off 5:off 6:off drbd常见问题 问题1 DRBD依赖于基于其内核模块，需手工加载 1modprobe drbd 问题2 命令drbdadm up all 相当于如下命令的组合： 123drbdadm attach all //Attach to backing device.drbdadm syncer all //Set synchronization parameters.drbdadm connect all //drbdadm connect resource 问题3 处理drbd裂脑问题（ro:Secondary/Unknown） 12345678910111213裂脑的状态为：ro：Secondary/Unknown可选择一个节点作为secondary，在该机器上执行drbdadm secondrat all #&lt;==备节点设置为被drbdadm dis`connect alldrbdadm -- --discard-my-data connect all #&lt;==本端放弃数据连接有时也需要在另一个节点上执行drbdadm connect all HeartBeat服务安装heartbeat1234567[root@itspafcmail01 ~]# mkdir /opt/Tools/[root@itspafcmail01 ~]# cd /opt/Tools/[root@itspafcmail01 Tools]# wget http://mirrors.ustc.edu.cn/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm[root@itspafcmail01 Tools]# rpm -ivh epel-release-6-8.noarch.rpm[root@itspafcmail01 Tools]# rpm -qa|grep epel[root@itspafcmail01 Tools]# yum install heartbeat* -y _#在red-hat下直接安装会报错 #修改下面两个文件将https变为http即可解决_ 12[root@itspafcmail01 yum.repos.d]# ls epel* epel.repo epel-testing.repo 由于客户方的操作系统不是我们安装的，存在很多的依赖关系，我这里选择在本地yum安装的时候保留一份，然后直接放到生产的机器上 配置文件说明配置文件：1/etc/ha.d/ 启动脚本：1/etc/init.d/heartbeat 资源控制目录：1/etc/ha.d/resource.d &lt;==脚本，控制资源的脚本，被HA调用。也可以放/etc/init.d/下 拷贝配置文件12[root@itspafcmail01 ha.d]# cd /usr/share/doc/heartbeat-3.0.4/[root@itspafcmail01 heartbeat-3.0.4]# cp authkeys ha.cf haresources /etc/ha.d/ 配置ha.cf文件1234567891011121314151617#日志配置debugfile /var/log/ha-debuglogfile /var/log/ha-loglogfacility local0#基础参数keepalive 2deadtime 30warntime 10initdead 120#串口#serial /dev/ttys0#选择多播的方式，需要改动的仅有eth2这块网卡，端口694上mcast eth4 225.0.0.7 694 1 0auto_failback on#两台服务器主机名node itspafcmail01node itspafcmail02crm no 配置authkey文件生成sha1值 1[root@itspafcmail01 ha.d]# echo turbo423|sha1sum7d44656e1b9fac646608cfa1452453eb7c0710d0 - 写入配置文件 12[root@itspafcmail01 ha.d]# cat authkeysauth 11 sha1 7d44656e1b9fac646608cfa1452453eb7c0710d0 配置权限600 1[root@itspafcmail01 ha.d]# chmod 600 authkeys 配置haresource文件 #/etc/ha.d/resource.d/IPaddr 实际就是一个脚本，用于服务启动后优先绑定在哪个IP上 itspafcmail01 IPaddr::192.168.2.10/24/eth4 itspafcmail02IPaddr::192.168.2.11/24/eth4 配置说明： #itspafcmail01 为主机名，表示初始状态会在itspafcmail01 绑定IP 10.0.0.17 #IPaddr为heartbeat配置IP的默认脚本，其后的IP等都是脚本的参数 #192.168.2.1/24/eth4为集群对外服务的VIP，初始启动在data-1-1上，24为子网掩码，eth0为ip绑定的实际物理网卡，为heartbeat提供对外服务的通信接口。 启动测试123456789[root@itspafcmail01 ha.d]# /etc/init.d/heartbeat startStarting High-Availability services: INFO: Resource is stoppedINFO: Resource is stoppedDone.[root@itspafcmail01 ha.d]# ps auxw|grep heartroot 13193 0.0 0.0 50124 7168 ? SLs 16:13 0:00 heartbeat: master control processroot 13197 0.0 0.0 49944 6988 ? SL 16:13 0:00 heartbeat: FIFO reader root 13198 0.0 0.0 49940 6984 ? SL 16:13 0:00 heartbeat: write: mcast eth4 root 13199 0.0 0.0 49940 6984 ? SL 16:13 0:00 heartbeat: read: mcast eth4 检查IP初始启动情况12[root@itspafcmail01 ha.d]# ip a|grep -E &quot;192.168.2.10|192.168.2.11&quot; inet 192.168.2.10/24 brd 192.168.2.255 scope global secondary eth4 接管的过程：模拟主机down机，看看VIP是否会被备机接管 成功则表示heartbeat部署正常 Heartbeat 控制drbd高可用的实现Ha本生有一个脚本用于控制drbd的即drbddisk启动drbd也可以用： 1/etc/ha.d/resource.d/drbddisk data start #这样执行之后就直接选主了 haresoures写法如下 12itspafcmail01 drbddisk::data IPaddr::192.168.2.10/24/eth4itspafcmail02 IPaddr::192.168.2.11/24/eth4 关于drbd选主的问题，在drbd都是secondary的情况下ha可以根据haresoures的内容进行选主，确保先把两边的drbd都启动好，再启动ha 通过脚本挂载和卸载drbd手动挂载的形式 1/etc./ha.d/resource.d/Filesystem /dev/drbd0 /maildata ext4 start 手动卸载的形式 1/etc./ha.d/resource.d/Filesystem /dev/drbd0 /maildata ext4 start haresoures写法如下 123itspafcmail01 drbddisk::data Filesystem::/dev/drbd0::/maildata::ext4 IPaddr::192.168.2.10/24/eth4itspafcmail02 IPaddr::192.168.2.11/24/eth4itspafcmail01 drbddisk::data Filesystem::/dev/drbd0::/maildata::ext4 IPaddr::192.168.2.10/24/eth4 上述命令等同于： 123/etc./ha.d/resource.d/drbddisk data start/etc./ha.d/resource.d/Filesystem /dev/drbd0 /maildata ext4 start/etc./ha.d/resource.d/IPaddr 192.168.2.10/24/eth4 start 关于停止的顺序先停VIP 再停挂载 最后改角色为secondarykillall -9 heartbeat的情况需要清理释放IP地址ip addr del 192.168.2.11/24 dev eth4 关于Primary/Unknow状态的修复手工处理裂脑问题，主机宕机后的修复 自动接管参数开启1，itspafcmail01 主不能自动开启heartbeat,drbd（#auto_failback on）。2，itspafcmail01 主故障备接管后,备对外提供服务，写数据（实现模拟100个文件）。itspafcmail02 备节点提升为主节点后的状态（Primary/Unknow ）3，itspafcmail01 主修复了，不要开启heartbeat及drbd手工处理： 确保心跳线通信正常 drbdadm up data #此时itspafcmail01状态（Secondary /Primary ） 同步完成启动heartbeat（/etc/init.d/heatbeat start itspafcmail01 (Primary/Secondary ) itspafcmail02 (Secondary /Primary ) 建议操作：自动接管参数关闭1，itspafcmail01 主不能自动开启heartbeat,drbd（auto_failback off）。2，itspafcmail01 主故障备接管后,备对外提供服务，写数据（实现模拟100个文件）。itspafcmail02 备节点提升为主节点后的状态（Primary/Unknow ）3，itspafcmail01 主修复了，不要开启heartbeat及drbd手工处理： 确保心跳线通信正常 drbdadm up data #此时itspafcmail01状态（Secondary /Primary ） 此时数据流从itspafcmail02 流向itspafcmail01 itspafcmail01启动heartbeat itspafcmail01（Secondary /Primary ） itspafcmail02 /usr/share/heartbeat/hb_standby （服务器回切） itspafcmail01 （Primary /Secondary ） DRBD主从自动切换测试首先启动node1的heartbeat，接着再启动node2的heartbeat。然后启动node1上的drbd，接着启动node2上的drbd Heartbeat控制turbomail编写资源脚本主从两台机都要有在资源目录下创建turbomail脚本 /etc/ha.d/resource.d/turbomail12345678910111213141516171819202122232425#!/bin/bash#Author :Adair#Filename :turbomail#chkconfig :2345 54 65SUCC=&quot;\\033[32m&quot; END=&quot;\\033[0m&quot;turbomail=&quot;/turbomail&quot;cd $turbomailif [ $# -ne 1 ]thenecho &quot;USAGE:$0 &#123;start|stop|restart&#125;&quot;exit 1fiif [ &quot;$1&quot; = &quot;start&quot; ]then nohup ./startall.sh &gt;nohup.txt 2&gt;&amp;1 echo -e &quot;Start turbomail... $&#123;SUCC&#125; [OK] $&#123;END&#125;&quot; elif [ &quot;$1&quot; = &quot;stop&quot; ]then nohup ./shutdownall.sh &gt;nohup.txt 2&gt;&amp;1 echo -e &quot;Stop turbomail... $&#123;SUCC&#125; [OK] $&#123;END&#125;&quot; elif [ &quot;$1&quot; = &quot;restart&quot; ]then nohup ./shutdownall.sh &gt;nohup.txt 2&gt;&amp;1 echo -e &quot;Stop turbomail... $&#123;SUCC&#125; [OK] $&#123;END&#125;&quot; nohup ./startall.sh &gt;nohup.txt 2&gt;&amp;1 echo -e &quot;Start turbomail... $&#123;SUCC&#125; [OK] $&#123;END&#125;&quot; fi 主的haresource文件变为： 1itspafcmail01 IPaddr::10.0.0.12/24/eth0 drbddisk::data Filesystem::/dev/drbd0::/maildata::ext4 turbomail 备的haresource文件变为： 1itspafcmail02 IPaddr::10.0.0.12/24/eth0 drbddisk::data Filesystem::/dev/drbd0::/maildata::ext4 turbomail 测试模拟和drbd的类似","raw":null,"content":null,"categories":[{"name":"工作","slug":"工作","permalink":"http://blog.cnjie.net/categories/工作/"}],"tags":[{"name":"项目实施","slug":"项目实施","permalink":"http://blog.cnjie.net/tags/项目实施/"}]},{"title":"yum方式安装openldap,phppldapadmin","slug":"yum方式安装openldap-phppldapadmin-lam","date":"2017-06-18T09:11:10.000Z","updated":"2020-07-19T09:36:17.556Z","comments":true,"path":"2017/06/18/yum方式安装openldap-phppldapadmin-lam/","link":"","permalink":"http://blog.cnjie.net/2017/06/18/yum方式安装openldap-phppldapadmin-lam/","excerpt":"","text":"&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;其实如果不是对ldap各种参数要求都十分严格的情况下，比较建议采用yum的方式安装。因为相关依赖环境，功能都十分全面。对于初学者，强烈建议第一次使用yum来安装。 一、准备环境&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;确保防火墙与selinux是否都为关闭，如果防火墙必须开启的情况下可做如下配置： 123456789101112131415# vim /etc/sysconfig/iptables*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 389 -j ACCEPT -s 192.168.0.0/16-A INPUT -m state --state NEW -m tcp -p tcp --dport 636 -j ACCEPT -s 192.168.0.0/16-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -j REJECT --reject-with icmp-host-prohibitedCOMMIT &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;重新加载后如下： 12345# iptables -LACCEPT tcp -- anywhere anywhere state NEW tcp dpt:sshACCEPT tcp -- anywhere anywhere state NEW tcp dpt:httpACCEPT tcp -- 192.168.0.0/16 anywhere state NEW tcp dpt:ldapACCEPT tcp -- 192.168.0.0/16 anywhere state NEW tcp dpt:ldaps 二、安装，配置OPENLDAP1yum install -y openldap-servers openldap-clients &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;创建日志相关 12345678mkdir /var/log/slapdchmod 755 /var/log/slapd/chown ldap:ldap /var/log/slapd/sed -i \"/local4.*/d\" /etc/rsyslog.confcat &gt;&gt; /etc/rsyslog.conf &lt;&lt; EOFlocal4.* /var/log/slapd/slapd.logEOFservice rsyslog restart 三、创建证书12cd /etc/pki/tls/certsmake slapd.pem 下面是一个例子： 这个时候，你可以运行openssl x509 -in slapd.pem -noout -text 去观察证书情况 123chmod 640 slapd.pemchown :ldap slapd.pemln -s /etc/pki/tls/certs/slapd.pem /etc/openldap/certs/slapd.pem 配置管理员密码 1234slappasswdNew password: ******Re-enter new password: ******&#123;SSHA&#125;WMz+mLF6bG9hshSe/zVEN2BdVEqmiAfs 四、配置ldap相关配置文件12cp /usr/share/openldap-servers/slapd.conf.obsolete /etc/openldap/slapd.confcp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG 更改相关配置文件 12345678910# vim /etc/openldap/slapd.conf1、更改所有dc=my-domain为你的domain2、替换掉证书位子TLSCACertificateFile /etc/pki/tls/certs/ca-bundle.crtTLSCertificateFile /etc/pki/tls/certs/slapd.pemTLSCertificateKeyFile /etc/pki/tls/certs/slapd.pem3、替换掉管理员密码# rootpw secret# rootpw &#123;crypt&#125;ijFYNcSNctBYgrootpw &#123;SSHA&#125;WMz+mLF6bG9hshSe/zVEN2BdVEqmiAfs 更改配置文件以开启SSL认证 123vim /etc/sysconfig/ldap SLAPD_LDAPS=yes 更新ldap配置文件 123456# vim /etc/openldap/ldap.conf##“dc=my-domain,dc=com”需要你做相同的配置（更改domain） BASE dc=shuyun,dc=comURI ldap://localhostTLS_REQCERT never 创建初始化数据 123456789101112131415vim /root/root.ldif##“dc=my-domain,dc=com”需要你做相同的配置（更改domain）##startdn: dc=my-domain,dc=comdc: my-domainobjectClass: dcObjectobjectClass: organizationalUnitou: my-domain.comdn: ou=people,dc=my-domain,dc=comou: peopleobjectClass: organizationalUnitdn: ou=groups,dc=my-domain,dc=comou: groupsobjectClass: organizationalUnit##end 12rm -rf /etc/openldap/slapd.d/*slapadd -v -n 2 -l /root/root.ldif 12chown -R ldap:ldap /var/lib/ldapchown -R ldap:ldap /etc/openldap/slapd.d 测试配置初始化 123rm -rf /etc/openldap/slapd.d/*slaptest -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.dchown -R ldap:ldap /etc/openldap/slapd.d 开机启动项 12chkconfig --level 235 slapd onservice slapd start 测试LDAP情况 12345ldapsearch -x -ZZ -h localhost##ps：-ZZ为启动加密认证，由于证书是自签问题，所以会报错（大致是未通过验证的证书之类的信息）： ldap_start_tls: Connect error (-11) additional info: TLS error -8172:Peer's certificate issuer has been marked as not trusted by the user.ldapsearch -x -H ldaps://localhost search结果如下 1234567891011121314151617181920212223242526# extended LDIF## LDAPv3# base &lt;dc=my-domain,dc=com&gt; (default) with scope subtree# filter: (objectclass=*)# requesting: ALL## my-domain.comdn: dc=my-domain,dc=comdc: my-domainobjectClass: dcObjectobjectClass: organizationalUnitou: my-domain.com# people, my-domain.comdn: ou=people,dc=my-domain,dc=comou: peopleobjectClass: organizationalUnit# groups, my-domain.comdn: ou=groups,dc=my-domain,dc=comou: groupsobjectClass: organizationalUnit# search resultsearch: 3result: 0 Success# numResponses: 4# numEntries: 3 配置主机别名 12vim /etc/nsswitch.confhosts: ldap files dns 五、安装phpldapadmin添加epel源 1# rpm -ivh http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 安装phpLDAPadmin 12# yum install -y phpldapadminAllow access from your network 配置Apache’s phpLDAPadmin的配置文件 1234567# vim /etc/httpd/conf.d/phpldapadmin.conf （自动创建）Order Deny,AllowDeny from allAllow from 127.0.0.1Allow from ::1Allow from 192.168.0#ps需要对此进行相关配置操作 禁用自动登录 123vim /etc/phpldapadmin/config.php#(line 398)//$servers-&gt;setValue('login','attr','uid'); 开启Apache服务器 1# service httpd restart 访问相关 123http://webserver/ldapadmin 用户名：cn=Manager,dc=my-domain,dc=com密码：你使用sldappass生成的密码 可以进行操作来观察tail -f /var/log/slapd/slapd.log日志。然后还有另外一种ldap web管理工具。","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"中间件应用","slug":"技术/中间件应用","permalink":"http://blog.cnjie.net/categories/技术/中间件应用/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"openldap","slug":"openldap","permalink":"http://blog.cnjie.net/tags/openldap/"}]},{"title":"openldap源码安装","slug":"openldap源码安装","date":"2017-06-18T09:10:33.000Z","updated":"2020-07-19T09:35:11.806Z","comments":true,"path":"2017/06/18/openldap源码安装/","link":"","permalink":"http://blog.cnjie.net/2017/06/18/openldap源码安装/","excerpt":"","text":"系统软件版本Os:CentOS6.3Gcc:4.1.2BerkeleyDB:4.8.24Openldap :2.4.44 必备软件GCCBerkeleyDBopenssl(installed by default) 问题与解决方案(1)不装GCC，执行./configure时，出现错误： 1configure: error: Unable to locate cc(1) or suitable replacement. Check PATH or set CC. 解决方法:install gcc 1[root@localhost openldap-2.4.19]#yum -y install gcc (2)不装BerkeleyDB,执行./configure时，出现错误： 1configure: error: BDB/HDB: BerkeleyDB not available 解决方法: 123456[root@localhost BerkeleyDB]# unzip db-4.8.24.zip[root@localhost BerkeleyDB]# cd db-4.8.24[root@localhost db-4.8.24]# cd build_unix/[root@localhost db-4.8.24]# ../dist/configure[root@localhost db-4.8.24]# make[root@localhost db-4.8.24]# make install 123[root@localhost openldap-2.4.44]# export CPPFLAGS=\"-I/usr/local/BerkeleyDB.4.8/include\"[root@localhost openldap-2.4.44]# export LDFLAGS=\"-L/usr/local/lib -L/usr/local/BerkeleyDB.4.8/lib -R/usr/local/BerkeleyDB.4.8/lib\"[root@localhost openldap-2.4.44]# export LD_LIBRARY_PATH=\"/usr/local/BerkeleyDB.4.8/lib\" 安装 openldap12345[root@localhost openldap-2.4.44]# ./configure[root@localhost openldap-2.4.44]# make depend[root@localhost openldap-2.4.44]# make[root@localhost openldap-2.4.44]# make test[root@localhost openldap-2.4.44]# make install 注意make test会进行很长一段时间，需要耐性等待待续……","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"中间件应用","slug":"技术/中间件应用","permalink":"http://blog.cnjie.net/categories/技术/中间件应用/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"openldap","slug":"openldap","permalink":"http://blog.cnjie.net/tags/openldap/"}]},{"title":"Linux批量替换文件内容3种方法","slug":"Linux批量替换文件内容3种方法","date":"2017-06-18T08:54:25.000Z","updated":"2020-07-19T09:34:40.398Z","comments":true,"path":"2017/06/18/Linux批量替换文件内容3种方法/","link":"","permalink":"http://blog.cnjie.net/2017/06/18/Linux批量替换文件内容3种方法/","excerpt":"","text":"方法1(sed)：&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Linux下批量替换多个文件中的字符串的简单方法。用sed命令可以批量替换多个文件中的字符串。用sed命令可以批量替换多个文件中的字符串。1sed -i \"s/原字符串/新字符串/g\" `grep 原字符串 -rl 所在目录` &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;例如：我要把mahuinan替换 为huinanma，执行命令：1sed -i \"s/mahuinan/huinanma/g\" 'grep mahuinan -rl /www' &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这是目前linux最简单的批量替换字符串命令了！&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;具体格式如下：1sed -i \"s/oldString/newString/g\" `grep oldString -rl /path` &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;实例代码：12sed -i \"s/大小多少/日月水火/g\" `grep 大小多少 -rl /usr/aa`sed -i \"s/大小多少/日月水火/g\" `grep 大小多少 -rl ./` 方法2(shell)：&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在日程的开发过程中，可能大家会遇到将某个变量名修改 为另一个变量名的情况，如果这个变量是一个局部变量的话，vi足以胜任，但是如果是某个全局变量的话，并且在很多文件中进行了使用，这个时候使用vi就是 一个不明智的选择。这里给出一个简单的shell命令，可以一次性将所有文件中的指定字符串进行修改：1grep \"abc\" * -R | awk -F: '&#123;print $1&#125;' | sort | uniq | xargs sed -i 's/abc/abcde/g' &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;批量替换 配置文件中的IP：1grep \"[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\" * -R | awk -F: '&#123;print $1&#125;' | sort | uniq | xargs sed -i 's/[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;/172\\.0\\.0\\.1/g' &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;补充说明：1sed -i \"s/oldString/newString/g\" `grep oldString -rl /path` &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;对多个文件的处理可能不支持，需要用 xargs, 搞定。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;变种如下：1grep oldString -rl /path | xargssed -i \"s/oldString/newString/g\" &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;注意：在 `grep oldString -rl /path` 中 ` 为1前边的翻引号`，而不是enter 前的 \\’","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"Linux","slug":"技术/Linux","permalink":"http://blog.cnjie.net/categories/技术/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.cnjie.net/tags/linux/"},{"name":"shell","slug":"shell","permalink":"http://blog.cnjie.net/tags/shell/"},{"name":"脚本","slug":"脚本","permalink":"http://blog.cnjie.net/tags/脚本/"}]},{"title":"《那些年，我们一起追过的女孩》--经典语录","slug":"那些年，我们一起追过的女孩","date":"2017-06-14T14:27:46.000Z","updated":"2020-07-19T08:29:50.145Z","comments":true,"path":"2017/06/14/那些年，我们一起追过的女孩/","link":"","permalink":"http://blog.cnjie.net/2017/06/14/那些年，我们一起追过的女孩/","excerpt":"","text":"&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“其实，会你这种题目，有什么了不起的啊。我敢跟你赌，十年后，我连bog是什么都不知道，还是可以活得好好的啊。”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“嗯。”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“你不相信啊？”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“我相信啊。”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“相信还那么用功读书！” &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;沈佳宜：人生本来就有很多事是徒劳无功的，但是我们还是依然要经历。（其实，没有一件事是徒劳无功的。比如我追你的这些年，我收获了更好的我，你收获了最真的感情，我们收获了一辈子的回忆。） &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“沈佳宜，我很喜欢你，非常喜欢你，总有一天，我一定要追到你！百分之一千万，一定会追到你。”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“你想知道答案吗？我现在就可以告诉你。。”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“不要！我没有问你，所以你也不可以拒绝我。”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“你真的不想知道啊。。。”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“拜托不要现在告诉我，请让我。。继续喜欢你！”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;其实，女孩早已在孔明灯的另一面写下：好。 &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;更早在高中毕业典礼那天，阳光很好，她和自己的闺蜜坐在操场边看着这群男生嬉笑打闹，突然转身在闺蜜耳边说：“如果，柯景腾和我告白，我会很高兴。” &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;柯景腾：虽然，我还没追到你哦，不过那些追都没追过你的男生怎么可以牵你的手啊，我自己都没牵过诶。 &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;柯景腾，你真的很幼稚。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“对啊！我就是幼稚，才会追你这种努力用功读书的女生！我就是幼稚，才有办法追你这么久！” &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;成长最残酷的部分就是，女孩永远比同年龄的男孩成熟。就是这种成熟，让男孩招架不住。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“你可是我追了N年的女生诶，要是你不见了，我找谁回忆我们的故事啊？” 长达两个小时的，两年来第一次的通话，结束在女孩那句“谢谢你喜欢我”之后男孩说的：“我也很喜欢当年喜欢你的自己。” &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“你该不会常翘课吧？”“当然啊，我本来就不喜欢念书啊。我是为了你才念诶。” &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;柯景腾：那天晚上我们聊了很多回忆，很多很多用功读书只为了更靠近她的日子。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;电话里，男孩询问女孩和他兄弟阿和过去的一段短暂恋情，却听到了女孩这样的一句话。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“但后来为什么分手啊？他对你不好吗？”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“并不是。我只是觉得阿和不够喜欢我。”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“阿和很喜欢你啦！”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“被你喜欢过，很难觉得。。别人有那么喜欢我。” &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“沈佳宜，我可不可以问你。。为什么当时没有想和我在一起啊？”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“常常听人家说啊，恋爱最美好的时候就是暧昧的时候。等到真正在一起了，很多感觉，都会消失不见。所以我就想，干脆让你再追我久一点，不然等你追到我之后就变懒了，那我不是很亏吗？” &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“沈佳宜，你相信有平行时空吗？也许，在那个平行时空里，我们是在一起的。” &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2005年的台北， 一起喜欢过女孩的那些男孩们，穿起正经八百的衬衫，笑着打趣说要去女孩的婚礼上绊倒新郎。最后的最后，男孩们闹着要吻新娘，新郎说没问题，但想要怎么吻新娘就要先怎么吻我。就在所有人不满地吐槽新郎小心眼的时候，男孩一个箭步冲上去吻住了新郎的嘴。 &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;还有，红包贺词的那句：【新婚快乐，我的青春。】&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;沈佳宜，你就是柯景腾的青春。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;柯景腾：诶，你不懂啦，如果你真的非常喜欢过一个女生，你就会知道，要真心祝福她永远幸福快乐，这个是不可能的事！&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我错了，原来，当你真的非常非常喜欢一个女孩，当她有人疼，有人爱，你会真心真意地祝福她，永远幸福，快乐。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;『没问题，但是怎么吻新娘就要先怎么吻我。』&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我冲上去吻住你老公的那一刻，我知道你笑着哭了。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我多想和你再靠近一点点，用尽各种手段。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;但是我知道，现在，对你最好的祝福，就是隔出最美丽的距离。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“那我就继续幼稚下去咯。”&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;“一定要哦。”","raw":null,"content":null,"categories":[{"name":"想法","slug":"想法","permalink":"http://blog.cnjie.net/categories/想法/"}],"tags":[{"name":"情怀","slug":"情怀","permalink":"http://blog.cnjie.net/tags/情怀/"}]},{"title":"再见，安卓","slug":"再见安卓","date":"2017-06-11T04:14:00.000Z","updated":"2020-07-19T09:34:01.843Z","comments":true,"path":"2017/06/11/再见安卓/","link":"","permalink":"http://blog.cnjie.net/2017/06/11/再见安卓/","excerpt":"","text":"正式与我的安卓机再见了，2017年是使用安卓的第5个年头。 2017-06-11 09:54:56","raw":null,"content":null,"categories":[{"name":"生活","slug":"生活","permalink":"http://blog.cnjie.net/categories/生活/"},{"name":"心情","slug":"生活/心情","permalink":"http://blog.cnjie.net/categories/生活/心情/"}],"tags":[{"name":"情怀","slug":"情怀","permalink":"http://blog.cnjie.net/tags/情怀/"},{"name":"心情","slug":"心情","permalink":"http://blog.cnjie.net/tags/心情/"}]},{"title":"Oracle11g 审计操作","slug":"Oracle11g-审计操作","date":"2016-03-12T14:21:28.000Z","updated":"2020-07-19T09:33:43.726Z","comments":true,"path":"2016/03/12/Oracle11g-审计操作/","link":"","permalink":"http://blog.cnjie.net/2016/03/12/Oracle11g-审计操作/","excerpt":"","text":"审计开启的过程：##查看审计是否开启12345678sql&gt; show parameter audit; NAME TYPE VALUE------------------------------------ ----------- ------------------------------audit_file_dest string /opt/oracle/admin/orcl/adumpaudit_sys_operations boolean FALSEaudit_syslog_level stringaudit_trail string DB 如上所示其中audit_sys_operations 的value为false，意味着数据库审计未开启其中audit_trail 的value为DB参数详解：AUDIT_TRAIL启用或禁用数据库审计。当设置该参数为NONE或FALSE时，将禁止数据库审计；当设置该参数为OS时，将激活数据库审计，并将审计记录写入到OS审计跟踪文件中；当设置该参数为DB或TRUE时，将激活数据库审计，并将审计记录写入#到数据字典SYS.AUD中；当设置该参数为DBEXTENDED时，不仅将审计记录写入到数据字典SYS.AUD中；当设置该参数为DBEXTENDED时，不仅将审计记录写入到数据字典SYS.AUD中，还会填充该数据字典的SQLBIND和SQLTEXT列。 激活审计12SQL&gt; alter system set audit_sys_operations=true scope=spfile;System altered. 启用详细审计123SQL&gt; alter system set audit_trail=db_extended scope=spfile;System altered. 如上所示修改系统信息，激活数据库审计参数详解：spfile是存储初始化参数的文件，还有一种是pfile也是存储初始化参数的文件，spfile是服务器端维护的，pfile是客户端维护的spfile只能通过系统更改，pfile可以手动修改。 注：上面操作完成后需要重启数据库使其生效 重启数据库==&gt;应用对系统的修改12345678910SQL&gt; startup force; （强制重启数据库）ORACLE instance started.Total System Global Area 839282688 bytesFixed Size 2217992 bytesVariable Size 633341944 bytesDatabase Buffers 197132288 bytesRedo Buffers 6590464 bytesDatabase mounted.Database opened. 确认开启情况1234567891011SQL&gt; show parameter audit; (确认是否开启)NAME TYPE VALUE------------------------------------ ----------- ------------------------------audit_file_dest string /opt/oracle/admin/orcl/adumpaudit_sys_operations boolean TRUEaudit_syslog_level stringaudit_trail string DB_EXTENDEDSQL&gt; #如上显示了audit_sys_operations 的值为true，同时audit_trail 的值为db_extended说明数据库审计已经激活sql&gt; select username,extended_timestamp,sql_text from dba_audit_trail where username=upper('hh'); #查询操作，比如我查看hh这个用户所做的操作 审计文件保存于/opt/oracle/admin/orcl/adump/ 关闭审计12SQL&gt; alter system set audit_sys_operations=false scope=spfile;sql&gt; alter system set audit_trail=none scope=spfile; 重启数据库==&gt;应用对系统的修改12345678910SQL&gt; startup force; （强制重启数据库）ORACLE instance started.Total System Global Area 839282688 bytesFixed Size 2217992 bytesVariable Size 633341944 bytesDatabase Buffers 197132288 bytesRedo Buffers 6590464 bytesDatabase mounted.Database opened. 关于oracle11g数据库审计开关的问题，完结","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"数据库","slug":"技术/数据库","permalink":"http://blog.cnjie.net/categories/技术/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://blog.cnjie.net/tags/数据库/"},{"name":"Oracle","slug":"Oracle","permalink":"http://blog.cnjie.net/tags/Oracle/"}]},{"title":"Mac OS下修复App Store无法登陆的问题","slug":"Mac-OS下修复App-Store无法登陆的问题","date":"2016-03-09T13:03:26.000Z","updated":"2020-07-19T09:33:32.711Z","comments":true,"path":"2016/03/09/Mac-OS下修复App-Store无法登陆的问题/","link":"","permalink":"http://blog.cnjie.net/2016/03/09/Mac-OS下修复App-Store无法登陆的问题/","excerpt":"","text":"&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;前几天因为在win10下面访问了Mac OS系统所在的盘，导致我可怜的黑苹果就此挂了，有人可能会问为什么会挂了呢？这里我要说一下，Mac OS的文件系统和win是不一样的，毕竟人家是高贵的Unix而来的，矫情点可以理解，我就因为访问了一下Mac os盘里的文件，就导致文件系统还原了，然后Mac OS就再也起不来了；甚是难过，并不是因为系统的难装，而是因为那一整堆的，已经配置的好的环境和那些价值“过亿”的数据，毕竟数据无价嘛，难过归难过，单系统还得装回来，毕竟还要装逼呢^_^ 好了吐槽了那么多我们来说说今天的主题”Mac OS下修复App Store无法登陆的问题“我们先来看看当前的不能登录的App Store时的网络情况12345678910111213141516Mac:~ Adair$ ifconfiglo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384 options=3&lt;RXCSUM,TXCSUM&gt; inet6 ::1 prefixlen 128 inet 127.0.0.1 netmask 0xff000000 inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1 nd6 options=1&lt;PERFORMNUD&gt;gif0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280stf0: flags=0&lt;&gt; mtu 1280en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500 ether 24:05:0f:74:ee:01 inet6 fe80::2605:fff:fe74:ee01%en1 prefixlen 64 scopeid 0x5 inet 192.168.0.103 netmask 0xffffff00 broadcast 192.168.168.255 nd6 options=1&lt;PERFORMNUD&gt; media: autoselect status: active &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;注意看上面的信息我们只能看到en0这张网卡，此时我是没装有线网卡的，因此这样网卡明显是无线网卡，但是mac是这样定义en0是有线,en1是无线上面我的信息明显违背了mac的定义，所以自然而然的Appstore就会出现无法登录的未知错误，网上推荐说先装有线网卡再装无线网卡，可是很不幸我是先装了无线再装的有线，自然问题多了些，下面开始讲讲解决方法吧,对了在讲解决方案前我们需要先把有线网卡装上： 根据上面的路径找到需要修改的文件，注意上面我们用黄色圈起来的地方，这个是我们需要修改的文件，操作前建议先备份一份，避免意外 打开com.apple.Boot.plist这个文件，添加下面两行12&lt;key&gt;EthernetBuiltIn&lt;/key&gt;&lt;string&gt;Yes&lt;/string&gt; 修改好后保存，然后重启电脑，再看看看当前的网络状况12345678910111213141516171819202122MAC:~ Adair$ ifconfiglo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384 options=3&lt;RXCSUM,TXCSUM&gt; inet6 ::1 prefixlen 128 inet 127.0.0.1 netmask 0xff000000 inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1 nd6 options=1&lt;PERFORMNUD&gt;gif0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280stf0: flags=0&lt;&gt; mtu 1280en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500 options=6b&lt;RXCSUM,TXCSUM,VLAN_HWTAGGING,TSO4,TSO6&gt; ether 10:c3:7b:b0:93:e6 nd6 options=1&lt;PERFORMNUD&gt; media: autoselect (&lt;unknown type&gt;) status: inactiveen1: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500 ether 24:05:0f:74:ee:01 inet6 fe80::2605:fff:fe74:ee01%en1 prefixlen 64 scopeid 0x5 inet 192.168.199.237 netmask 0xffffff00 broadcast 192.168.199.255 nd6 options=1&lt;PERFORMNUD&gt; media: autoselect status: active 这会儿我们再去登录App Store，天啊惊奇的发现不再报错了，正常登陆，看下图圈出来的部分 至此完美修复App Store无法登录的问题","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"MacOS","slug":"技术/MacOS","permalink":"http://blog.cnjie.net/categories/技术/MacOS/"}],"tags":[{"name":"MacOS","slug":"MacOS","permalink":"http://blog.cnjie.net/tags/MacOS/"}]},{"title":"Tomcat apr错误","slug":"Tomcat-apr错误","date":"2016-03-07T14:55:14.000Z","updated":"2020-07-19T09:32:40.258Z","comments":true,"path":"2016/03/07/Tomcat-apr错误/","link":"","permalink":"http://blog.cnjie.net/2016/03/07/Tomcat-apr错误/","excerpt":"","text":"缺少apr的支持，导致启动报错: 信息: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path:解决办法按照官方说明需要：APR libraryOpenSSL librariesopenssl 可以用 yum install openssl-devel，apr还是下载*.gz来安装。 下载三个源码包： 1、apr-1.4.6.tar.gz 2、apr-util-1.4.1.tar.gz 3、tomcat-native-1.1.27-src.tar.gz安装 apr12345cd apr-1.4.6 ./configure --prefix=/usr/local/aprmake make install #apr 默认安装在 /usr/local/apr 安装 apr-util1234cd apr-util-1.4.1 ./configure --with-apr=/usr/local/apr make make install 安装 tomcat-native1234cd tomcat-native-1.2.27-src/jni/native ./configure --with-apr=/usr/local/apr --with-java-home=/usr/java/jdk1.7.0 make make install 设置 apr 的环境变量：12345vi /etc/profile # 后面添加以下内容 注：这个只会临时生效export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/apr/lib # 使profile生效， source /etc/profile 启动 tomcat 后， 看日志：12bin/startup.sh head logs/catalina.out 成功会看到1234信息: Loaded APR based Apache Tomcat Native library 1.1.33 using APR version 1.5.2.2015-11-16 9:44:40 org.apache.catalina.core.AprLifecycleListener init信息: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].2015-11-16 9:44:40 org.apache.catalina.core.AprLifecycleListener initializeSSL","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"中间件应用","slug":"技术/中间件应用","permalink":"http://blog.cnjie.net/categories/技术/中间件应用/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.cnjie.net/tags/web/"},{"name":"Tomcat","slug":"Tomcat","permalink":"http://blog.cnjie.net/tags/Tomcat/"}]},{"title":"Oracle数据库导出","slug":"Oracle数据库导出","date":"2016-01-15T08:14:13.000Z","updated":"2020-07-19T09:32:00.086Z","comments":true,"path":"2016/01/15/Oracle数据库导出/","link":"","permalink":"http://blog.cnjie.net/2016/01/15/Oracle数据库导出/","excerpt":"","text":"时间：2016.01.14 17.30 问题描述：&ensp; &ensp; &ensp; &ensp;因项目整体替换，应客户方面的要求，要对用户当前的数据库进行导出然后在本地导入，重构，分析，数据库导出本地导入这一部分由我完成，其余部分由开发的同事解决，数据库导出一两台的话都是小问题，当我仔细看了之后才发现从143-185一共四十二台数据库服务器，且除此之外并没有用于自动化运维的工具，也不能在上面安装，仅能通过ssh方式连接上去，连上去之后还是需要手动执行导出，在量小的情况下还可以接受，但是量大了就不能接受了。 解决方案：&ensp; &ensp; &ensp; &ensp;编写了一个数据库导出导出脚本，通过scp上传到各个服务器然后执行 ，这样也只能节省一部分时间，要全部下载到本地还需要很多时间，下载完成后需要导回到本地，这又是时间，下面是导出脚本（有部分改动自行观察），导入脚本与之类似： 123456789101112#!/bin/bashexport ORACLE_BASE=/opt/oracleexport ORACLE_HOME=/opt/oracle/10gexport ORACLE_SID=orclexport PATH=$ORACLE_HOME/bin:$PATHbacktime=$(date +%Y%m%d) deltime=$(date -d \"7 days ago\" +%Y%m%d)echo \"del bakup start....\"rm -rf /home/oracle/$deltime.dmprm -rf /home/oracle/$deltime.txtecho \"bakup start....\"/opt/oracle/10g/bin/exp fuck/lfuck@fuck file=/home/oracle/$backtime.dmp owner=fuck log=/home/oracle/$backtime.txt 总结&ensp; &ensp; &ensp; &ensp;数据库操作时需要特别小心，毕竟数据无价","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"数据库","slug":"技术/数据库","permalink":"http://blog.cnjie.net/categories/技术/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://blog.cnjie.net/tags/数据库/"},{"name":"Oracle","slug":"Oracle","permalink":"http://blog.cnjie.net/tags/Oracle/"}]},{"title":"解决ORACLE 11g命令行中上下左右无法使用的问题","slug":"Oracle命令行问题","date":"2015-07-30T02:57:43.000Z","updated":"2020-07-19T09:31:44.313Z","comments":true,"path":"2015/07/30/Oracle命令行问题/","link":"","permalink":"http://blog.cnjie.net/2015/07/30/Oracle命令行问题/","excerpt":"","text":"所需的两个软件已放至云盘http://pan.baidu.com/s/1gdyE9EF下载后直接进行以下操作 1234567891011tar xvf readline-6.2.tar.gz cd readline-6.2 ./configure &amp;&amp; make &amp;&amp; make install cd tar xvf rlwrap-0.42.tar.gz cd rlwrap-0.42 ./configure &amp;&amp; make &amp;&amp; make install echo \"alias sqlplus='rlwrap sqlplus'\" &gt;&gt;/home oracle/.bash_profile su - oracle source /home/oracle/.bash_profile 完成以上操作后再次登陆数据库便解决了无法上下左右切换的问题","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://blog.cnjie.net/categories/技术/"},{"name":"数据库","slug":"技术/数据库","permalink":"http://blog.cnjie.net/categories/技术/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://blog.cnjie.net/tags/数据库/"},{"name":"Oracle","slug":"Oracle","permalink":"http://blog.cnjie.net/tags/Oracle/"}]}]}